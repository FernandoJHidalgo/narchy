package nars.inter.gnutella;

import org.apache.commons.lang3.tuple.Triple;

import java.io.File;
import java.io.IOException;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;
import java.util.concurrent.atomic.AtomicInteger;

public class Client {
    public static final int AUTO_PING_PER_N_MESSAGES = 10;
    private static final long DEAD_CONNECTION_REMOVAL_INTERVAL_MS = 10000;

    private final short localPort;
    private final boolean working;
    private final ConcurrentHashMap<InetSocketAddress, PeerThread> neighbors;
    public final ConcurrentHashMap<InetSocketAddress, PeerThread> downloads;

    private final ConcurrentHashMap<String, ArrayList<InetSocketAddress>> firstPongsFromNeighbors;
    private final Executor pendingMessages = Executors.newSingleThreadExecutor();

    private final InetSocketAddress myInetSocketAddress;
    private final InetAddress ipAddress;
    private final int numberFileShared;
    private final int numberKbShared;

    private final byte[] idServent;
    public final ClientModel model;
    private final Peer peer;
    private int maxNodes;

    /**
     * Creates a Client who manage sending/receiving Messages of the Gnutella
     * protocol
     *
     * @param localPort   * @param localPort Port in which the servent owner of this
     *                    client works
     * @param neighbors   HashMap that contains the connections to its neighbors nodes.
     *                    Keys are in format InetSocketAddress, those InetSocketAddress
     *                    are bound with each connection(ServentThread).
     * @param historyPing HashMap that contains de history of every PingMessage received
     *                    from a neighbor Servent and every PingMessage generated by the
     *                    Servent that owns this Server
     * @param ipAddress   the ip address bound to this client
     * @param idServent   The 16-byte string uniquely identifying the servent on the
     *                    network who is being requested to push
     * @param downloads   HashMap that contains the connections to nodes which the
     *                    Servent owner of this Server has request for downloads and
     *                    connections to nodes that request for a download . Keys are in
     *                    format InetSocketAddress, those InetSocketAddress are bound
     *                    with each connection(ServentThread). Values are ServentThread.
     */
    public Client(Peer peer, short localPort,
                  ConcurrentHashMap<InetSocketAddress, PeerThread> neighbors,
                  InetAddress ipAddress,
                  byte[] idServent,
                  ConcurrentHashMap<InetSocketAddress, PeerThread> downloads,
                  ClientModel b
    ) {
        this.peer = peer;
        this.model = b;
        this.localPort = localPort;
        working = true;
        this.neighbors = neighbors;
        this.downloads = downloads;

        this.ipAddress = ipAddress;

        numberFileShared = 0;
        numberKbShared = 0;
        myInetSocketAddress = new InetSocketAddress(ipAddress, localPort);
        firstPongsFromNeighbors = new ConcurrentHashMap<String, ArrayList<InetSocketAddress>>();
        this.idServent = idServent;
        maxNodes = 10;
    }

    private synchronized void removeDeadConnections() {
        Iterator<Map.Entry<InetSocketAddress, PeerThread>> ii = neighbors.entrySet().iterator();
        while (ii.hasNext()) {
            if (!ii.next().getValue().connected()) {
                ii.remove();
            }
        }
    }


    public synchronized void setMaxNodes() {
        maxNodes++;
    }

    public synchronized int getMaxNodes() {
        return maxNodes;
    }


    /**
     * Returns a PingMessage. MessageID is randomly generated. Ttl value is set
     * by default to 7, hop to 0
     *
     * @return the PingMessage
     */
    public PingMessage createPing() {
        PingMessage m = new PingMessage(GnutellaConstants.DEFAULT_TTL,
                GnutellaConstants.INITIAL_HOP, myInetSocketAddress);
        return m;
    }

    private PongMessage newPong(Message sent) {
        return newPong(sent.id.toByteArray());
    }

    private PongMessage newPong(byte[] messageId) {
        PongMessage pong = new PongMessage(messageId,
                GnutellaConstants.DEFAULT_TTL, (byte) 0, myInetSocketAddress,
                (short) myInetSocketAddress.getPort(), getIpAddress(),
                getNumberFileShared(), getNumberKbShared());
        return pong;
    }

    private Message createQuery(short minSpeed, String searchCriteria) {
        QueryMessage query = new QueryMessage(GnutellaConstants.DEFAULT_TTL,
                GnutellaConstants.INITIAL_HOP, 2 + searchCriteria.length(),
                myInetSocketAddress, minSpeed, searchCriteria);
        return query;
    }

    private QueryHitMessage createQueryHit(byte[] idMessage, int pL,
                                                  InetSocketAddress receptorNode, short port,
                                                  InetAddress myIpAddress, List<Triple<String, Integer, Integer>> files, byte[] idServent) {

        QueryHitMessage queryHit = new QueryHitMessage(idMessage,
                GnutellaConstants.DEFAULT_TTL, (byte) 0, pL,
                myInetSocketAddress, port, ipAddress,
                GnutellaConstants.DFLT_SPEED, files,
                idServent);
        return queryHit;
    }

    /**
     * Adds a PingMessage to the pending Message queue
     */
    public void addPing() {
        pending(createPing());
    }

    public final void pending(Message m) {
        pendingMessages.execute(() -> {
            handle(m);
        });
    }


    /**
     * Adds a QuerMessage to the pending Message queue
     *
     * @param minSpeed       The minimum speed (in kB/second) of servents that should
     *                       respond to this message.
     * @param searchCriteria A nul (i.e. 0x00) terminated search string. The maximum length
     *                       of this string is bounded by the Payload_Length field of the
     *                       descriptor header.
     */
    public void addQuery(short minSpeed, String searchCriteria) {
        pending(createQuery(minSpeed, searchCriteria));
    }

    final AtomicInteger messageCount = new AtomicInteger();

    public void start() {
        new Thread(() -> {
            while (working) {
                nars.util.Util.pause(DEAD_CONNECTION_REMOVAL_INTERVAL_MS);

                removeDeadConnections();
            }
        }).start();
    }

    public final void handle(Message message) {
        boolean fordward = message.refreshMessage();

        switch (message.getPayloadD()) {
            case GnutellaConstants.PING:
                onPing(message, fordward);
                break;

            case GnutellaConstants.PONG:
                onPong((PongMessage) message);
                break;

            case GnutellaConstants.QUERY:
                onQuery((QueryMessage) message);
                break;

            case GnutellaConstants.QUERY_HIT:
                onHit((QueryHitMessage) message);
                break;

        }

        if (messageCount.incrementAndGet() % AUTO_PING_PER_N_MESSAGES == 0) {
            addPing();
        }
    }

    public void onPing(Message message, boolean forward) {
        if (peer.seen(message))
            return;

        PeerThread n = neighbors.get(message.receptorNode);

        if (forward) {
            // Si yo lo cree
            if (myInetSocketAddress.equals(message.receptorNode)) {
                broadcast(message);
            } else {
                if (n!=null) {
                    // contesto al que lo envio
                    n.send(
                            newPong(message)
                    );
                    broadcast(message, message.receptorNode);
                }
            }

        } else {
            // no tiene vida solo contesto
            if (n!=null)
                n.send(newPong(message));
        }
    }

    public void onPong(PongMessage messageP) {
        // 3 casos es nuestro, no es nuestro, no debio de haber
        // llegado

        if (peer.seen(messageP)) {

            // // Primer caso es nuestro

            InetSocketAddress ownerPing = messageP.receptorNode;
            if (myInetSocketAddress.equals(ownerPing)) {
                //for this node

                if (firstPongsFromNeighbors.get(messageP.idString()).contains(messageP.receptorNode)) {

                    connect(messageP.getIpAddressString(), messageP.getPort());

                } else { // Es el primer pong que recibe este nodo

                    firstPongsFromNeighbors.get(
                            messageP.idString()).add(
                            messageP.receptorNode);

                }
            } else {
                //forward

                neighbors.get(ownerPing).send(messageP);
            }

        } else {
            // EL PROTOCOLO DICE QUE SI ME LLEGA UN PONG DE UN PING
            // QUE NO CONOZCO DEBO SACAR EL PONG DE LA RED
            // PERO ESO YA LO HACEMOS AL HACER PULL SOBRE LA LISTA
            // DE MENSAJES

        }
    }

    public void onHit(QueryHitMessage m) {
        if (peer.seen(m))
            return;

        InetSocketAddress owner = m.receptorNode;
        if (myInetSocketAddress.equals(owner)) {
            model.onQueryHit(this, m);
        } else {
            neighbors.get(owner).send(m);
        }
    }


    public void onQuery(QueryMessage message) {
        if (myInetSocketAddress.equals(message.receptorNode)) {
            broadcast(message, message.receptorNode);
        } else {
            QueryHitMessage mQueryH = model.search(this, message);
            if (mQueryH != null)
                neighbors.get(message.receptorNode).send(mQueryH);
        }


//            Enumeration<InetSocketAddress> e = neighbors.keys();
//
//            // propago el query
//            while (e.hasMoreElements()) {
//
//                InetSocketAddress idNodeNext = e.nextElement();
//                // a todos los que no son el que lo recibio
//                if (!idNodeNext.equals(message.receptorNode)) {
//
//                    neighbors.get(idNodeNext).send(
//                            message);
//                }
//
//            }


    }

    public QueryHitMessage searchFiles(QueryMessage message, String directory) {
        File myFiles[] = new File(directory).listFiles();
        sortFilesDesc(myFiles);

        List<Triple<String, Integer, Integer>> ll = new ArrayList();

        int payloadL = GnutellaConstants.QUERYHIT_PART_L + GnutellaConstants.SERVER_ID_L;

        for (int i = 0; i < myFiles.length; i++) {

            File ff = myFiles[i];
            if (ff.isDirectory())
                continue;

            String fn = ff.getName();
            if (fn.contains(message.query)) {
                long len = ff.length();
                ll.add(Triple.of(fn.trim(), (int) len, i));
                payloadL += len;

            }


        }

        if (ll.isEmpty())
            return null;

        return createQueryHit(message.id.toByteArray(),
                payloadL, myInetSocketAddress,
                (short) myInetSocketAddress.getPort(),
                ipAddress, ll,
                idServent);
    }


    public void broadcast(Message message, InetSocketAddress except) {
        neighbors.forEach((k, v) -> {
            if (!k.equals(except))
                v.send(message);
        });
    }

    public void broadcast(Message message) {
        neighbors.forEach((k, v) -> {
            v.send(message);
        });
    }

    /**
     * Returns the local port number to which this socket is bound.
     *
     * @return the local port number
     */
    public short getLocalPort() {
        return localPort;
    }

    /**
     * Returns the number of files that the servent is sharing on the network
     *
     * @return number of files shared
     */
    public synchronized int getNumberFileShared() {
        return numberFileShared;
    }

    /**
     * Returns the number of kilobytes of data that the servent is sharing on
     * the network
     *
     * @return number of kilobytes shared
     */
    public synchronized int getNumberKbShared() {
        return numberKbShared;
    }

    /**
     * Returns the address of the Client
     *
     * @return the address of the Client
     */
    public synchronized InetAddress getIpAddress() {
        return ipAddress;
    }

    /**
     * Creates a download connection with a Server with the specified data
     *
     * @param ip    The IP address of the responding host.
     * @param port  The port number on which the responding host can accept
     *              incoming connections.
     * @param file  The double-nul (i.e. 0x0000) terminated name of the file whose
     *              index is File_Index.
     * @param size  The size (in bytes) of the file whose index is File_Index
     * @param range A number, assigned by the responding host, which is used to
     *              uniquely identify the file matching the corresponding query.
     */
    public synchronized void download(InetAddress i, short port, String file, int size, int range) {
        if (downloads.size() <= GnutellaConstants.MAX_DOWNLOADS) {
            Socket sktTmp;

            try {
                sktTmp = new Socket(i, port);

                InetSocketAddress inetSocketA = new InetSocketAddress(
                        sktTmp.getInetAddress(), sktTmp.getLocalPort());
                PeerThread thread = new PeerThread(peer.messageCache, sktTmp, this, inetSocketA);
                if (thread.start(file, size, range)) {
                    downloads.putIfAbsent(inetSocketA, thread);
                    new Thread(thread).start();
                } else {
                    System.out.println("DENIED  DOWNLOAD CONNECTION");
                }
            } catch (UnknownHostException e) {

                e.printStackTrace();
            } catch (IOException e) {

                e.printStackTrace();
            }

        } else {
            System.out.println("MAX DOWNLOADS EXCEEDED");
        }
    }

    /**
     * Creates a connection with to the specified port number at the specified
     * IP address.
     *
     * @param ip   the ip address
     * @param port the port number
     * @return true if the connection is establish, otherwise false
     */
    public synchronized boolean connect(String ip, short port) {
        if (neighbors.size() <= maxNodes) {
            PeerThread node;
            try {
                Socket sktTmp = new Socket(InetAddress.getByName(ip), port);
                InetSocketAddress inetSocketA = new InetSocketAddress(
                        sktTmp.getInetAddress(), sktTmp.getLocalPort());
                node = new PeerThread(peer.messageCache, sktTmp, this, inetSocketA);

                if (node.connexionRequest() == GnutellaConstants.ACCEPTED) {

                    neighbors.computeIfAbsent(inetSocketA, (i) -> {
                        new Thread(node).start();
                        return node;
                    });

                    return true;
                }
            } catch (UnknownHostException e) {

                e.printStackTrace();
            } catch (IOException e) {

                e.printStackTrace();
            }
            System.err.println("DENIED CONNECCTION");

            return false;
        }

        return false;
    }

    private static void sortFilesDesc(File[] files) {
        Comparator<File> comparator = new Comparator<File>() {

            @Override
            public int compare(File o1, File o2) {
                return Long.valueOf(o1.lastModified()).compareTo(
                        o2.lastModified());
            }
        };
        Arrays.sort(files, comparator);

    }
}
