package nars.inter.gnutella;

import java.io.File;
import java.io.IOException;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.Executor;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.atomic.AtomicInteger;

public class Client {

    private final short port;
    boolean running;
    private final ConcurrentHashMap<InetSocketAddress, PeerThread> neighbors;

    private final ConcurrentHashMap<String, Collection<InetSocketAddress>> firstPongsFromNeighbors;
    private final ExecutorService pendingMessages = Executors.newSingleThreadExecutor();

    private final InetAddress ipAddress;
    @Deprecated private final int numberFileShared;
    private final int numberKbShared;


    private final byte[] peerID;
    public final ClientModel model;
    public final Peer peer;
    private int maxNodes;

    /**
     * Creates a Client who manage sending/receiving Messages of the Gnutella
     * protocol
     *
     * @param port   * @param localPort Port in which the servent owner of this
     *                    client works
     * @param neighbors   HashMap that contains the connections to its neighbors nodes.
     *                    Keys are in format InetSocketAddress, those InetSocketAddress
     *                    are bound with each connection(ServentThread).
     * @param historyPing HashMap that contains de history of every PingMessage received
     *                    from a neighbor Servent and every PingMessage generated by the
     *                    Servent that owns this Server
     * @param ipAddress   the ip address bound to this client
     * @param peerID   The 16-byte string uniquely identifying the servent on the
     *                    network who is being requested to push
     */
    public Client(Peer peer, short port,
                  ConcurrentHashMap<InetSocketAddress, PeerThread> neighbors,
                  InetAddress ipAddress,
                  byte[] peerID,
                  ClientModel b
    ) {
        this.peer = peer;
        this.model = b;
        this.port = port;
        running = true;
        this.neighbors = neighbors;

        this.ipAddress = ipAddress;

        numberFileShared = 0;
        numberKbShared = 0;

        firstPongsFromNeighbors = new ConcurrentHashMap<>();
        this.peerID = peerID;
        maxNodes = 10;
    }

    synchronized void removeDeadConnections() {
        Iterator<Map.Entry<InetSocketAddress, PeerThread>> ii = neighbors.entrySet().iterator();
        while (ii.hasNext()) {
            if (!ii.next().getValue().connected()) {
                ii.remove();
            }
        }
    }


    public synchronized void setMaxNodes() {
        maxNodes++;
    }

    public int getMaxNodes() {
        return maxNodes;
    }


    /**
     * Returns a PingMessage. MessageID is randomly generated. Ttl value is set
     * by default to 7, hop to 0
     *
     * @return the PingMessage
     */
    public PingMessage createPing() {
        PingMessage m = new PingMessage(GnutellaConstants.DEFAULT_TTL,
                GnutellaConstants.INITIAL_HOP, peer.address);
        return m;
    }

    private PongMessage newPong(Message sent) {
        return newPong(sent.id.toByteArray());
    }

    private PongMessage newPong(byte[] messageId) {
        PongMessage pong = new PongMessage(messageId,
                GnutellaConstants.DEFAULT_TTL, (byte) 0, peer.address,
                (short) peer.address.getPort(), getIpAddress(),
                getNumberFileShared(), getNumberKbShared());
        return pong;
    }

    private Message createQuery(short minSpeed, String searchCriteria) {
        QueryMessage query = new QueryMessage(GnutellaConstants.DEFAULT_TTL,
                GnutellaConstants.INITIAL_HOP, 2 + searchCriteria.length(),
                peer.address, minSpeed, searchCriteria);
        return query;
    }
    private Message createQuery(short minSpeed, byte[] searchCriteria) {
        QueryMessage query = new QueryMessage(GnutellaConstants.DEFAULT_TTL,
                GnutellaConstants.INITIAL_HOP, 2 + searchCriteria.length,
                peer.address, minSpeed, searchCriteria);
        return query;
    }

//    public QueryHitMessage createQueryHit(byte[] idMessage, int pL,
//                                           List<Triple<String, Integer, Integer>> files) {
//        return createQueryHit(idMessage, pL, localPort, files, peerID);
//    }
//

    public QueryHitMessage createQueryHit(InetSocketAddress recipient, byte[] idMessage, int pL, byte[] result) {
        return createQueryHit(recipient, idMessage, pL, port, result, peerID );
    }

    public QueryHitMessage createQueryHit(InetSocketAddress recipient, byte[] idMessage, int pL,
                                           short port,
                                           byte[] result, byte[] idServent) {

        QueryHitMessage queryHit = new QueryHitMessage(idMessage,
                GnutellaConstants.DEFAULT_TTL, (byte) 0, (byte) pL,
                recipient, port, ipAddress,
                GnutellaConstants.DFLT_SPEED, result,
                idServent);
        return queryHit;
    }

    /**
     * Adds a PingMessage to the pending Message queue
     */
    public void addPing() {
        pending(createPing());
    }

    public final void pending(Message m) {
        pendingMessages.execute(() -> handle(m));
    }



    /**
     * Adds a QuerMessage to the pending Message queue
     *
     * @param minSpeed       The minimum speed (in kB/second) of servents that should
     *                       respond to this message.
     * @param searchCriteria A nul (i.e. 0x00) terminated search string. The maximum length
     *                       of this string is bounded by the Payload_Length field of the
     *                       descriptor header.
     */
    public void query(short minSpeed, String searchCriteria) {
        broadcast(createQuery(minSpeed, searchCriteria));
    }
    public void query(short minSpeed, byte[] searchCriteria) {
        broadcast(createQuery(minSpeed, searchCriteria));
    }

    final AtomicInteger messageCount = new AtomicInteger();


    public final void handle(Message message) {
        boolean fordward = message.refreshMessage();

        switch (message.getPayloadD()) {
            case GnutellaConstants.PING:
                onPing(message, fordward);
                break;

            case GnutellaConstants.PONG:
                onPong((PongMessage) message);
                break;

            case GnutellaConstants.QUERY:
                onQuery((QueryMessage) message);
                break;

            case GnutellaConstants.QUERY_HIT:
                onHit((QueryHitMessage) message);
                break;

        }

        if (messageCount.incrementAndGet() % GnutellaConstants.AUTO_PING_PER_N_MESSAGES == 0) {
            addPing();
        }
    }

    public void onPing(Message message, boolean forward) {
        if (peer.seen(message))
            return;

        PeerThread n = neighbors.get(message.recipient);

        if (forward) {
            // Si yo lo cree
            if (peer.address.equals(message.recipient)) {
                broadcast(message);
            } else {
                if (n != null) {
                    // contesto al que lo envio
                    n.send(
                            newPong(message)
                    );
                    broadcast(message, message.recipient);
                }
            }

        } else {
            // no tiene vida solo contesto
            if (n != null)
                n.send(newPong(message));
        }
    }

    public void onPong(PongMessage messageP) {
        // 3 casos es nuestro, no es nuestro, no debio de haber
        // llegado

        if (peer.seen(messageP)) {

            // // Primer caso es nuestro

            InetSocketAddress ownerPing = messageP.recipient;
            if (peer.address.equals(ownerPing)) {
                //for this node

                Collection<InetSocketAddress> firstPing = firstPongsFromNeighbors.get(messageP.idString());
                if (firstPing.contains(messageP.recipient)) {

                    connect(messageP.getIpAddressString(), messageP.getPort());

                } else { // Es el primer pong que recibe este nodo

                    firstPing.add(messageP.recipient);

                }
            } else {
                //forward

                neighbors.get(ownerPing).send(messageP);
            }

        } else {
            // EL PROTOCOLO DICE QUE SI ME LLEGA UN PONG DE UN PING
            // QUE NO CONOZCO DEBO SACAR EL PONG DE LA RED
            // PERO ESO YA LO HACEMOS AL HACER PULL SOBRE LA LISTA
            // DE MENSAJES

        }
    }

    public void onHit(QueryHitMessage m) {


        InetSocketAddress owner = m.recipient;
        //if (!peer.address.equals(owner)) {
        model.onQueryHit(this, m);
        //} else {

        if (!peer.address.equals(owner)) {
            if (!peer.seen(m))
                neighbors.get(owner).send(m);
        }
    }


    public void onQuery(QueryMessage q) {


        if (peer.address.equals(q.recipient)) {

        } else {
            model.search(this, q, (mQueryH) -> {
                neighbors.get(q.recipient).send(mQueryH);
            });
            broadcast(q, q.recipient);
        }

        //TODO decide to propagate query

//            Enumeration<InetSocketAddress> e = neighbors.keys();
//
//            // propago el query
//            while (e.hasMoreElements()) {
//
//                InetSocketAddress idNodeNext = e.nextElement();
//                // a todos los que no son el que lo recibio
//                if (!idNodeNext.equals(message.receptorNode)) {
//
//                    neighbors.get(idNodeNext).send(
//                            message);
//                }
//
//            }


    }

//    public QueryHitMessage searchFiles(QueryMessage message, String directory) {
//        File myFiles[] = new File(directory).listFiles();
//        sortFilesDesc(myFiles);
//
//        List<Triple<String, Integer, Integer>> ll = Global.newArrayList(0);
//
//        int payloadL = GnutellaConstants.QUERYHIT_PART_L + GnutellaConstants.SERVER_ID_L;
//
//        CharSequence qs = message.queryString();
//
//        for (int i = 0; i < myFiles.length; i++) {
//
//            File ff = myFiles[i];
//            if (ff.isDirectory())
//                continue;
//
//            String fn = ff.getName();
//
//            if (fn.contains(qs)) {
//                long len = ff.length();
//                ll.add(
//                    Triple.of(fn.trim(), (int) len, i)
//                );
//                payloadL += len;
//
//            }
//        }
//
//        return !ll.isEmpty() ? createQueryHit(message.idBytes(), payloadL, port,
//                null, //TODO encode 'll' as bytes,
//                peerID
//        ) : null;
//    }


    public void broadcast(Message message, InetSocketAddress except) {
        //peer.logger.trace("{} broadcast: {} exceptTo {}", peer.server.socket, message, except);
        peer.seen(message);
        neighbors.forEach((k, v) -> {

            if (!k.equals(except))
                v.send(message);
        });
    }

    public void broadcast(Message message) {
        //peer.logger.trace("broadcast: {}", message);
        peer.seen(message);
        neighbors.forEach((k, v) -> v.send(message));
    }

    /**
     * Returns the local port number to which this socket is bound.
     *
     * @return the local port number
     */
    public short getPort() {
        return port;
    }

    /**
     * Returns the number of files that the servent is sharing on the network
     *
     * @return number of files shared
     */
    public synchronized int getNumberFileShared() {
        return numberFileShared;
    }

    /**
     * Returns the number of kilobytes of data that the servent is sharing on
     * the network
     *
     * @return number of kilobytes shared
     */
    public synchronized int getNumberKbShared() {
        return numberKbShared;
    }

    /**
     * Returns the address of the Client
     *
     * @return the address of the Client
     */
    public synchronized InetAddress getIpAddress() {
        return ipAddress;
    }

    /**
     * Creates a download connection with a Server with the specified data
     *
     * @param ip    The IP address of the responding host.
     * @param port  The port number on which the responding host can accept
     *              incoming connections.
     * @param file  The double-nul (i.e. 0x0000) terminated name of the file whose
     *              index is File_Index.
     * @param size  The size (in bytes) of the file whose index is File_Index
     * @param range A number, assigned by the responding host, which is used to
     *              uniquely identify the file matching the corresponding query.
     */
    public synchronized void download(InetAddress i, short port, String file, int size, int range) {

        Socket sktTmp;

        try {
            sktTmp = new Socket(i, port);

            InetSocketAddress inetSocketA = new InetSocketAddress(sktTmp.getInetAddress(), sktTmp.getLocalPort());
            PeerThread thread = new PeerThread(peer.messageCache, sktTmp, this, inetSocketA);
            if (thread.start(file, size, range)) {
                peer.exe.execute(thread);
            } else {
                System.out.println("DENIED  DOWNLOAD CONNECTION");
            }
        } catch (IOException e) {

            e.printStackTrace();
        }


    }

    /**
     * Creates a connection with to the specified port number at the specified
     * IP address.
     *
     * @param ip   the ip address
     * @param port the port number
     * @return true if the connection is establish, otherwise false
     */
    public synchronized boolean connect(String ip, short port) {
        if (neighbors.size() <= maxNodes) {
            PeerThread node;
            try {
                Socket sktTmp = new Socket(InetAddress.getByName(ip), port);
                InetSocketAddress inetSocketA = new InetSocketAddress(
                        sktTmp.getInetAddress(), sktTmp.getLocalPort());
                node = new PeerThread(peer.messageCache, sktTmp, this, inetSocketA);

                if (node.connexionRequest() == GnutellaConstants.ACCEPTED) {

                    neighbors.computeIfAbsent(inetSocketA, (i) -> {
                        peer.exe.execute(node);
                        return node;
                    });

                    return true;
                }
            } catch (IOException e) {

                e.printStackTrace();
            }
            System.err.println("DENIED CONNECCTION");

            return false;
        }

        return false;
    }

//    private static void sortFilesDesc(File[] files) {
//        Comparator<File> comparator = (o1, o2) -> Long.valueOf(o1.lastModified()).compareTo(
//                o2.lastModified());
//        Arrays.sort(files, comparator);
//
//    }

    public void stop() {

        pendingMessages.shutdownNow();
        running = false;

    }
}
