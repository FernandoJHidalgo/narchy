//General Induction and Temporal Induction
//  When P and then S happened according to an observation, by induction (weak) it may be that alyways after P, usually S happens.
//      According to reductions: For implications, the predicate may be allowed an implication, but not subject


//    A, B, after(Task,Belief),  |- ((&/,B,I) =/> A), (Truth:Induction),
//                                   (A =\> (&/,B,I)), (Truth:Abduction),
//                                   ((&/,B,I) </> A), (Truth:Comparison),
//                                  (&/,B,I,A), (Truth:Intersection)

    //B=before, A=after
//    B, A, task("."), time(dtEvents)                          --is(B,"==>") |- (B ==>+- A), (Belief:Abduction)
//    B, A, task("."), time(dtEventsOrEternals), neqAndCom(A,B),         --is(B,"==>") |- varIntro((B ==>+- A)), (Belief:Abduction)
//    B, A, task("."), time(dtEvents)                       --is(A,"==>") |- (A ==>+- B), (Belief:Induction)
//    B, A, task("."), time(dtEventsOrEternals), neqAndCom(A,B),       --is(A,"==>") |- varIntro((A ==>+- B)), (Belief:Induction)


   //GOAL induction/propagation - (goal intentionally remains subjunctive speculation, not fact)
   //G, X, neqRCom(G,X),neqRCom(G,X) |- (G&|X), (Goal:Induction)

   B, A, --is(B,"==>") |- (A ==>+- B), (Belief:Induction, Time:BeliefRelative)
    B, A, neqAndCom(A,B), --is(B,"==>") |- varIntro((A ==>+- B)), (Belief:Induction, Time:BeliefRelative)
        B, A, --is(B,"==>") |- (--A ==>+- B), (Belief:InductionPN, Time:BeliefRelative)
        B, A, neqAndCom(A,B),  --is(B,"==>") |- varIntro((--A ==>+- B)), (Belief:InductionPN, Time:BeliefRelative)

    B, A, --is(A,"==>") |- (B ==>+- A), (Belief:Abduction, Time:TaskRelative)
    B, A, neqAndCom(A,B), --is(A,"==>") |- varIntro((B ==>+- A)), (Belief:Abduction, Time:TaskRelative)
        B, A, --is(A,"==>") |- (--B ==>+- A), (Belief:AbductionN, Time:TaskRelative)
            //time(dtAfter),
        B, A, neqAndCom(A,B), --is(A,"==>") |- varIntro((--B ==>+- A)), (Belief:AbductionN, Time:TaskRelative)
            //, time(dtAfterOrEternals)

//    B, A, task(positive), task("."), time(dtEvents), --is(B,"==>") |- (B ==>+- A), (Belief:Abduction)
//    B, A, task(positive), task("."), time(dtEventsOrEternals), neqAndCom(A,B),         --is(B,"==>") |- varIntro((B ==>+- A)), (Belief:Abduction)
//        B, A, task(negative), task("."), time(dtEvents), --is(B,"==>") |- (--B ==>+- A), (Belief:AbductionN)
//        B, A, task(negative), task("."), time(dtEventsOrEternals), neqAndCom(A,B),     --is(B,"==>") |- varIntro((--B ==>+- A)), (Belief:AbductionN)
//    B, A, belief(positive), task("."), time(dtEvents),  --is(A,"==>") |- (A ==>+- B), (Belief:Induction)
//    B, A, belief(positive), task("."), time(dtEventsOrEternals), neqAndCom(A,B),       --is(A,"==>") |- varIntro((A ==>+- B)), (Belief:Induction)
//        B, A, belief(negative), task("."), time(dtEvents), --is(A,"==>") |- (--A ==>+- B), (Belief:InductionPN)
//        B, A, belief(negative), task("."), time(dtEventsOrEternals), neqAndCom(A,B),   --is(A,"==>") |- varIntro((--A ==>+- B)), (Belief:InductionPN)

//&&
    B, A                  |- (polarize(B,task) &&+- polarize(A,belief)), (Belief:IntersectionDepolarized, Time:Relative)
        //B, A, task("."), neqRCom(A,B)     |- (--,((--,polarize(B,task)) &&+- (--,polarize(A,belief)))), (Belief:UnionDepolarized)

        //B, A, task("."), time(dtEvents), --is(A,"==>"),--is(B,"==>")                            |- (B &&+- A), (Belief:Intersection)
    B, A, neqAndCom(A,B)  |- varIntro((polarize(B,task) &&+- polarize(A,belief))), (Belief:IntersectionDepolarized, Time:Relative)
        //B, A, task("."), neqAndCom(A,B),  --is(A,"==>"),--is(B,"==>")  |- varIntro((--,((--,polarize(B,task)) &&+- (--,polarize(A,belief))))), (Belief:UnionDepolarized)

        //B, A, task("."), time(dtEventsOrEternals), neqAndCom(A,B), --is(A,"==>"),--is(B,"==>")  |- varIntro((B &&+- A)), (Belief:Intersection)



//    B, A, task("."), time(dtEvents),                             --is(A,"==>"),--is(B,"==>") |- (A ==>+- B), (Belief:Induction)
//    B, A, task("."), time(dtEventsOrEternals), neqAndCom(A,B),     --is(A,"==>"),--is(B,"==>") |- varIntro((A ==>+- B)), (Belief:Induction)
//        B, A, task(negative), task("."), time(dtEvents),                          --is(A,"==>"),--is(B,"==>") |- ((--,%A) ==>+- B), (Belief:InductionN)
//        B, A, task(negative), task("."), time(dtEventsOrEternals), neqAndCom(A,B), --is(A,"==>"),--is(B,"==>") |- varIntro(((--,%A) ==>+- B)), (Belief:InductionN)

//    B, A, belief(positive), task("."), time(dtEvents),                                --is(B,"==>"),--is(A,"==>") |- (B ==>+- A), (Belief:Abduction)
//    B, A, belief(positive), task("."), time(dtEventsOrEternals), neqAndCom(A,B),       --is(A,"==>"),--is(B,"==>") |- varIntro((B ==>+- A)), (Belief:Abduction)
//        B, A, belief(negative), task("."), time(dtEvents),                            --is(B,"==>"),--is(A,"==>") |- ((--,%B) ==>+- A), (Belief:AbductionPN)
//        B, A, belief(negative), task("."), time(dtEventsOrEternals), neqAndCom(A,B),   --is(A,"==>"),--is(B,"==>") |- varIntro(((--,%B) ==>+- A)), (Belief:AbductionPN)




//NAL3 difference comparator
    B, A, neqRCom(A,B), hasNoDiffed(A), hasNoDiffed(B) |- (B ~ A), (Belief:Difference)
    B, A, neqRCom(A,B), hasNoDiffed(A), hasNoDiffed(B) |- (A ~ B), (Belief:DifferenceReverse)

        //the hasNoDiffs constraint is not entirely necessary;
        //for now it is just meant to prevent derivations like:
        //  (tetris(5,13)~(((5,13)~(3,13))-->tetris)).



    //S || P: //should be covered more accurataely by the above cases
    //S, P, time(dtAfter), task("."), neqCom(P,S) |- (--,((--,%S) &&+- (--,%P))), (Belief:Union)
    //S, P, time(dtEventsOrEternals), task("."), neqAndCom(P,S) |- (--,varIntro(((--,%S) &&+- (--,%P)))), (Belief:Union)


//backward temporal induction
//    (A ==> B), A, time(decomposeTask), task("?") |- B, (Punctuation:Question)
//    ((--,%A) ==> B), A, time(decomposeTask), task("?") |- B, (Punctuation:Question)
//    (A ==> B), B, time(decomposeTask), task("?") |- A, (Punctuation:Question)
    //(A <=> B), A, time(decomposeTask), task("?") |- B, (Punctuation:Question)
