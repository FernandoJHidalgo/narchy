//The rules of NAL, can be interpreted by considering the intiution behind the following two relations:
// Statement:                 (A --> B):               A can stand for B
// Statement about Statement: (A --> B) ==> (X --> Y): If A is true, so is/will be B
// --> is a relation in meaning of terms, while ==> is a relation of truth between statements.



//// inheritance-based syllogism ////////////////////////////////////////////////////////////////////////////////////
// If A is a special case of B, and B is a special case of C, so is A a special case of C (strong), the other variations are hypotheses (weak)
//       (A --> B) ------- (B --> C)
//            \               /
//             \             /
//              \           /
//               \         /
//                (A --> C)

    (A --> B), (B --> C), neqRCom(A,C)     |- (A --> C), (Belief:Deduction, Goal:Desire, Time:Intersect)
      //(B --> C), (A --> B), neqRCom(A,C)    |- (A --> C), (Belief:DeductionX, Goal:Desire)

        (A --> B), (B --> C), task("!"), neq(A,C)      |- (A --> C), (Punctuation:Quest)

        (A --> B), (B --> C), task("?@"), neqRCom(A,C)  |- (A --> C)
        //(B --> C), (A --> B), task("?@"), neqRCom(A,C)  |- (A --> C)

    (A --> B), (A --> C), neqRCom(B,C)      |- (C --> B), (Belief:Abduction, Goal:DesireWeak, Time:Intersect)

        (A --> B), (A --> C), task("!"), neq(B,C)      |- (C --> B), (Punctuation:Quest)

      //(A --> B), (A --> C), neqRCom(B,C)      |- (B --> C), (Belief:Abduction, Goal:DesireWeak)
        (A --> B), (A --> C), task("?@"), neqRCom(B,C)  |- (C --> B)
            //(A --> B), (A --> C), task("@"), neqRCom(B,C)  |- (C --> B), (Punctuation:Quest)
        (A --> B), (A --> C), task("?@"), neqRCom(B,C)  |- (B --> C)
            //(A --> B), (A --> C), task("@"), neqRCom(B,C)  |- (B --> C), (Punctuation:Quest)
        //(A --> B), (A --> C), task("?"), neqRCom(B,C) |- (C <-> B), (Punctuation:Question)
        //(A --> B), (A --> C), task("?"), belief(negative), neqRCom(B,C) |- (--C <-> B), (Punctuation:Question)
                    //(A --> B), (A --> C), task("?"), belief(negative), neqRCom(B,C) |- (--C --> B), (Punctuation:Question)
            //(A --> B), (A --> C), task("@"), neqRCom(B,C)  |- (B --> C), (Punctuation:Quest)

    (A --> C), (B --> C), neqRCom(A,B)      |- (A --> B), (Belief:Induction, Goal:DesireWeak, Time:Intersect)
      //(A --> C), (B --> C), neqRCom(A,B)      |- (B --> A), (Belief:Induction, Goal:DesireWeak)

        (A --> C), (B --> C), task("!"), neq(A,B)      |- (B --> C), (Punctuation:Quest)

        (A --> C), (B --> C), task("?@"), neqRCom(A,B) |- (A --> B)
            //(A --> C), (B --> C), task("@"), neqRCom(A,B)  |- (A --> B), (Punctuation:Quest)
        (A --> C), (B --> C), task("?@"), neqRCom(A,B) |- (B --> A)
            //(A --> C), (B --> C), task("@"), neqRCom(A,B)  |- (B --> A), (Punctuation:Quest)
        //(A --> C), (B --> C), task("?"), belief(negative), neqRCom(A,B) |- (A --> --B), (Punctuation:Question)
        //(A --> C), (B --> C), task("?"), neqRCom(A,B) |- (A <-> B), (Punctuation:Question)
        //(A --> C), (B --> C), task("?"), belief(negative), neqRCom(A,B) |- (A <-> --B), (Punctuation:Question)


            //(A --> C), (B --> C), task("@"), neqRCom(A,B)  |- (B --> A), (Punctuation:Quest)

    (A --> B), (B --> C), neqRCom(A,C)      |- (C --> A), (Belief:Exemplification, Goal:DesireWeak, Time:Intersect)

        (A --> B), (B --> C), task("!"), neq(A,C)      |- (C --> A), (Punctuation:Quest)

     //(B --> C), (A --> B), neqRCom(A,C)      |- (C --> A), (Belief:ExemplificationX, Goal:DesireWeak)
        (A --> B), (B --> C), task("?@"), neqRCom(A,C)  |- (C --> A)
        //(B --> C), (A --> B), task("?@"), neqRCom(A,C)  |- (C --> A)
            //(A --> B), (B --> C), task("@"), neqRCom(A,C)  |- (C --> A), (Punctuation:Quest)


//// similarity from inheritance ////////////////////////////////////////////////////////////////////////////////////
//If S is a special case of P, and P is a special case of S, then S and P are similar

    (S --> P), (P --> S) |- (S <-> P), (Belief:Intersection, Goal:DesireWeak, Time:Intersect)
    //(S --> P), (P --> S) |- --(S <-> P), (Belief:ComparisonSymmetric, Time:Intersect)
    //(S --> P), (P --> S) |- (S <-> P), (Belief:Comparison)

////// similarity-based syllogism ////////////////////////////////////////////////////////////////////////////////////
////If P and S are a special case of M, then they might be similar (weak),
////also if P and S are a general case of M
//
    (P --> M), (S --> M), neqRCom(S,P) |- (S <-> P), (Belief:Comparison, Time:Intersect)
        //, Goal:DesireWeak
    (M --> P), (M --> S), neqRCom(S,P) |- (S <-> P), (Belief:Comparison, Time:Intersect)
        //, Goal:DesireWeak


    //this is basically a duplicate of the generalized analogy; see analogy.nal
    //(M <-> P), (S <-> M), neqRCom(S,P) |- (S <-> P), (Belief:Resemblance, Goal:Weak)
            //TODO write test case for this


//// inheritance from similarty <- todo check why this one was missing ////////////////////////////////////////////////////////////////////////////////////
    //(S <-> P), P         |- (S --> P), (Belief:Identity)
    //TODO maybe Comparison..
    (S <-> P), (P --> S) |- (S --> P), (Belief:ReduceConjunction, Time:Intersect)
    (P --> S), (S <-> P), task("?") |- (P --> S), (Belief:BeliefStructuralReduction, Punctuation:Belief, Time:Intersect)




    //(X <-> Y), X, task("?") |- (Y-->X),   (Punctuation:Question)
    //(X <-> Y), Y, task("?") |- (X-->Y),   (Punctuation:Question)
    //(X <-> Y), X, task("?") |- Y,   (Punctuation:Question)
    //(X <-> Y), X, task("@") |- Y,   (Punctuation:Quest)



/////////    (S <-> --P), (P <-> --S) |- (--S <-> --P), (Belief:Intersection)
