//The rules of NAL, can be interpreted by considering the intiution behind the following two relations:
// Statement:                 (A --> B):               A can stand for B
// Statement about Statement: (A --> B) ==> (X --> Y): If A is true, so is/will be B
// --> is a relation in meaning of terms, while ==> is a relation of truth between statements.



//// inheritance-based syllogism ////////////////////////////////////////////////////////////////////////////////////
// If A is a special case of B, and B is a special case of C, so is A a special case of C (strong), the other variations are hypotheses (weak)
//       (A --> B) ------- (B --> C)
//            \               /
//             \             /
//              \           /
//               \         /
//                (A --> C)

    (A --> B), (B --> C), neqRCom(A,C)      |- (A --> C), (Belief:Deduction, Goal:Induction)


        (A --> B), (B --> C), task("?"), neqRCom(A,C)  |- (A --> C), (Punctuation:Question)
            (A --> B), (B --> C), task("@"), neqRCom(A,C)  |- (A --> C), (Punctuation:Quest)
        (A --> B), (B --> C), task("?"), neqRCom(A,C)  |- (C --> A), (Punctuation:Question)
            (A --> B), (B --> C), task("@"), neqRCom(A,C)  |- (C --> A), (Punctuation:Quest)

    (A --> B), (A --> C), neqRCom(B,C)      |- (C --> B), (Belief:Abduction)
        (A --> B), (A --> C), task("?"), neqRCom(B,C)  |- (C --> B), (Punctuation:Question)
            (A --> B), (A --> C), task("@"), neqRCom(B,C)  |- (C --> B), (Punctuation:Quest)
        (A --> B), (A --> C), task("?"), neqRCom(B,C)  |- (B --> C), (Punctuation:Question)
            (A --> B), (A --> C), task("@"), neqRCom(B,C)  |- (B --> C), (Punctuation:Quest)

    (A --> C), (B --> C), neqRCom(A,B)      |- (A --> B), (Belief:Induction)
        (A --> C), (B --> C), task("?"), neqRCom(A,B)  |- (A --> B), (Punctuation:Question)
            (A --> C), (B --> C), task("@"), neqRCom(A,B)  |- (A --> B), (Punctuation:Quest)
        (A --> C), (B --> C), task("?"), neqRCom(A,B)  |- (B --> A), (Punctuation:Question)
            (A --> C), (B --> C), task("@"), neqRCom(A,B)  |- (B --> A), (Punctuation:Quest)

    (A --> B), (B --> C), neqRCom(A,C)      |- (C --> A), (Belief:Exemplification)



//// similarity-based syllogism ////////////////////////////////////////////////////////////////////////////////////
//If P and S are a special case of M, then they might be similar (weak),
//also if P and S are a general case of M

    (P --> M), (S --> M), neqRCom(S,P) |- (P <-> S), (Belief:Comparison)
    (M --> P), (M --> S), neqRCom(S,P) |- (P <-> S), (Belief:Comparison)


    (M <-> P), (S <-> M), neqRCom(S,P) |- (S <-> P), (Belief:Resemblance, Goal:Induction)
            //TODO write test case for this


//// inheritance from similarty <- todo check why this one was missing ////////////////////////////////////////////////////////////////////////////////////

    (S <-> P), (P --> S) |- (S --> P), (Belief:ReduceConjunction, Goal:Induction)

//// similarity from inheritance ////////////////////////////////////////////////////////////////////////////////////
//If S is a special case of P, and P is a special case of S, then S and P are similar

    (S --> P), (P --> S) |- (S <-> P), (Belief:Intersection, Goal:Induction)

    (X <-> Y), X, task("?") |- (Y-->X),   (Punctuation:Question)
    (X <-> Y), Y, task("?") |- (X-->Y),   (Punctuation:Question)
    //(X <-> Y), X, task("?") |- Y,   (Punctuation:Question)
    //(X <-> Y), X, task("@") |- Y,   (Punctuation:Quest)

    (A --> C), (B --> C), belief(positive), neqRCom(A,B), task("?") |- (A <-> B), (Punctuation:Question)
    (A --> C), (B --> C), belief(negative), neqRCom(A,B), task("?") |- (A <-> --B), (Punctuation:Question)
    (C --> A), (C --> B), belief(positive), neqRCom(A,B), task("?") |- (A <-> B), (Punctuation:Question)
    (C --> A), (C --> B), belief(negative), neqRCom(A,B), task("?") |- (A <-> --B), (Punctuation:Question)


/////////    (S <-> --P), (P <-> --S) |- (--S <-> --P), (Belief:Intersection)
