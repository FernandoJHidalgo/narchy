//The rules of NAL, can be interpreted by considering the intiution behind the following two relations:
// Statement:                 (A --> B):               A can stand for B
// Statement about Statement: (A --> B) ==> (X --> Y): If A is true, so is/will be B
// --> is a relation in meaning of terms, while ==> is a relation of truth between statements.



//// inheritance-based syllogism ////////////////////////////////////////////////////////////////////////////////////
// If A is a special case of B, and B is a special case of C, so is A a special case of C (strong), the other variations are hypotheses (weak)
//       (A --> B) ------- (B --> C)
//            \               /
//             \             /
//              \           /
//               \         /
//                (A --> C)

    (A --> B), (B --> C), neqRCom(A,C)      |- (A --> C), (Belief:Deduction, Goal:Strong)
        (A --> B), (B --> C), task("?"), neqRCom(A,C)  |- (A --> C), (Punctuation:Question)
            (A --> B), (B --> C), task("@"), neqRCom(A,C)  |- (A --> C), (Punctuation:Quest)
        (A --> B), (B --> C), task("?"), neqRCom(A,C)  |- (C --> A), (Punctuation:Question)
            (A --> B), (B --> C), task("@"), neqRCom(A,C)  |- (C --> A), (Punctuation:Quest)

    (A --> B), (A --> C), neqRCom(B,C)      |- (C --> B), (Belief:Abduction, Goal:Weak)
        (A --> B), (A --> C), task("?"), neqRCom(B,C)  |- (C --> B), (Punctuation:Question)
            (A --> B), (A --> C), task("@"), neqRCom(B,C)  |- (C --> B), (Punctuation:Quest)
        (A --> B), (A --> C), task("?"), neqRCom(B,C)  |- (B --> C), (Punctuation:Question)
            (A --> B), (A --> C), task("@"), neqRCom(B,C)  |- (B --> C), (Punctuation:Quest)

    (A --> C), (B --> C), neqRCom(A,B)      |- (A --> B), (Belief:Induction, Goal:Weak)
        (A --> C), (B --> C), task("?"), neqRCom(A,B)  |- (A --> B), (Punctuation:Question)
            (A --> C), (B --> C), task("@"), neqRCom(A,B)  |- (A --> B), (Punctuation:Quest)
        (A --> C), (B --> C), task("?"), neqRCom(A,B)  |- (B --> A), (Punctuation:Question)
            (A --> C), (B --> C), task("@"), neqRCom(A,B)  |- (B --> A), (Punctuation:Quest)

    (A --> B), (B --> C), neqRCom(A,C)      |- (C --> A), (Belief:Exemplification, Goal:Weak)



//// similarity-based syllogism ////////////////////////////////////////////////////////////////////////////////////
//If P and S are a special case of M, then they might be similar (weak),
//also if P and S are a general case of M

    (P --> M), (S --> M), neqRCom(S,P) |- (P <-> S), (Belief:Comparison, Goal:Weak)
    (M --> P), (M --> S), neqRCom(S,P) |- (P <-> S), (Belief:Comparison, Goal:Weak)

//If M is a special case of P and S and M are similar, then S is also a special case of P (strong)

    (M --> P), (S <-> M), neqRCom(S,P) |- (S --> P), (Belief:Analogy, Goal:Strong)
            //TODO write test case for this
    (P --> M), (S <-> M), neqRCom(S,P) |- (P --> S), (Belief:Analogy, Goal:Strong)
            //TODO write test case for this
    (M <-> P), (S <-> M), neqRCom(S,P) |- (S <-> P), (Belief:Resemblance, Goal:Strong)
            //TODO write test case for this

    //variable elimination 4b:
    (X --> A),        ((Y --> A)<->(Y --> C)),  neqRCom(X,C), neq(X,Y)      |- (X-->C), (Belief:Analogy, Goal:Strong)
        (X --> A),  (--(Y --> A)<->(Y --> C)),  neqRCom(X,C), neq(X,Y)      |- (X-->C), (Belief:AnalogyN, Goal:StrongN)
    //(X --> A),       ((#W --> A)<->(#W --> C)),  neqRCom(X,C), neq(X,#W)    |- (X-->C), (Belief:Analogy, Goal:Strong)
    //    (X --> A), (--(#W --> A)<->(#W --> C)),  neqRCom(X,C), neq(X,#W)    |- (X-->C), (Belief:AnalogyN, Goal:StrongN)
    (A --> X),        ((A --> Y)<->(C --> Y)),  neqRCom(X,C), neq(X,Y)      |- (C-->X), (Belief:Analogy, Goal:Strong)
        (A --> X),  (--(A --> Y)<->(C --> Y)),  neqRCom(X,C), neq(X,Y)      |- (C-->X), (Belief:AnalogyN, Goal:StrongN)
    //(A --> X),       ((A --> #W)<->(C --> #W)),  neqRCom(X,C), neq(X,#W)    |- (C-->X), (Belief:Analogy, Goal:Strong)
    //    (A --> X), (--(A --> #W)<->(C --> #W)),  neqRCom(X,C), neq(X,#W)    |- (C-->X), (Belief:AnalogyN, Goal:StrongN)

//// inheritance from similarty <- todo check why this one was missing ////////////////////////////////////////////////////////////////////////////////////

    (S <-> P), (P --> S) |- (S --> P), (Belief:ReduceConjunction, Goal:Strong)

//// similarity from inheritance ////////////////////////////////////////////////////////////////////////////////////
//If S is a special case of P, and P is a special case of S, then S and P are similar

    (S --> P), (P --> S) |- (S <-> P), (Belief:Intersection, Goal:Strong)

    (X <-> Y), X, task("?") |- Y,   (Punctuation:Question)
    (X <-> Y), X, task("@") |- Y,   (Punctuation:Quest)

    (A --> C), (B --> C), neqRCom(A,B), task("?") |- (A <-> B), (Punctuation:Question)
    (C --> A), (C --> B), neqRCom(A,B), task("?") |- (A <-> B), (Punctuation:Question)


/////////    (S <-> --P), (P <-> --S) |- (--S <-> --P), (Belief:Intersection)
