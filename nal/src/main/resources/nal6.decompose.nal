//conjunction/disjunction structural decomposition

  //Conjunction structural decompose: C = (&&,a,b,..)
    C, X, eventOf(C,X)                        |-   conjWithout(C,X), (Belief:StructuralDeduction, Time:TaskSubSequence)
//    C, X, eventOf(C,X)                        |-   X, (Belief:StructuralDeduction, Time:TaskSubEvent)
    C, X, eventOfNeg(C,X)                     |-   conjWithout(C,--X), (Belief:StructuralDeduction, Time:TaskSubSequence)
//    C, X, eventOfNeg(C,X)                     |- --X, (Belief:StructuralDeduction, Time:TaskSubEvent)

      //C, X, eventOf(C,X),    conjParallel(C), --is(X,"#")    |-   X, (  Goal:StructuralDeduction, Time:TaskSubEventPos)
      //C, X, eventOfNeg(C,X), conjParallel(C), --is(X,"#")    |- --X, (  Goal:StructuralDeduction, Time:TaskSubEventNeg)
        //^ use the eventFirstOf() version below



//// propositional decomposition ////////////////////////////////////////////////////////////////////////////////////
//If S is the case, and (&&,S,A..+) is not the case, it can't be that (&&,A..+) is the case

    //CONJ
    S, C, eventOf(C,S) |-      conjWithout(C,  S), (Belief:DecomposePP, Time:TaskInBeliefPos)
    S, C, eventOfNeg(C,S) |-   conjWithout(C,--S), (Belief:DecomposeNP, Time:TaskInBeliefNeg)
    //DISJ
    S, D, eventOfNeg(D,S) |- --conjWithout(D,--S), (Belief:DecomposeNN, Time:TaskInBeliefNeg)
    S, D, eventOf(D,S) |-    --conjWithout(D,  S), (Belief:DecomposePN, Time:TaskInBeliefPos)



//    //goal/antigoal in sequence
//    X, C, eventOf(C,X), --eventOfNeg(C,X)   |- C, (Goal:DesireWeak, Time:BeliefAtTask)
//      //X, C, eventOfNeg(C,X), --eventOf(C,X)   |- --C, (Goal:Deduction, Time:BeliefAtTask)
//    X, C, eventOfNeg(C,X), --eventOf(C,X)   |- C, (Goal:DesireWeakN, Time:BeliefAtTask)
//      //X, C, eventOf(C,X), --eventOfNeg(C,X)   |- --C, (Goal:DeductionN, Time:BeliefAtTask)

    //X, C, eventOfNeg(C,X) |- --conjWithout(C,--X), (Goal:DesireWeak, Time:BeliefSubSequence)
    //X, C, eventOf(C,X)    |- --conjWithout(C,X), (Goal:DesireWeakN, Time:BeliefSubSequence)

    //D, X, --is(X,"#"),                     eventOf(D,X)     |- --X,  (Belief:StructuralDeductionWeakN, Time:TaskSubEventPos)
    //D, X, --is(X,"#"),conjParallel(D), eventOf(D,X)     |- --X,  (  Goal:StructuralDeductionWeakN, Time:TaskSubEventPos)
    //D, X, --is(X,"#"),                     eventOfNeg(D,X)  |-   X,  (Belief:StructuralDeductionWeakN, Time:TaskSubEventNeg)
    //D, X, --is(X,"#"),conjParallel(D), eventOfNeg(D,X)  |-   X,  (  Goal:StructuralDeductionWeakN, Time:TaskSubEventNeg)



    //see: https://en.wikipedia.org/wiki/Imperative_logic#Ross.27_Paradox


    //X is the desired event suffix (outcome).
    //C is a sequence ending in it.  this forms a goal of the sequence minus the trailing
    //TODO X, C    |- conjDropIfLatestUnifies(C,  X), (Goal:Deduction,..
    X, C, eventLastOf(C,X), --eventOfNeg(C,X)       |-   conjDropIfLatest(C,X),     (Goal:Desire,Time:TaskLastInBeliefPos)
    //TODO test:
      //X, C, eventLastOfNeg(C,X),--eventOf(C,X)      |-   --negateEvents(conjDropIfLatest(C,--X)), (Goal:DesireWeak,Time:TaskLastInBeliefNeg)
      X, C, eventLastOfNeg(C,X)                     |- --conjDropIfLatest(C,--X), (Goal:DesireWeak,Time:TaskLastInBeliefNeg)

    X, C, eventLastOfNeg(C,X), --eventOf(C,X)       |-   conjDropIfLatest(C,--X),   (Goal:DesireN,Time:TaskLastInBeliefNeg)
    //TODO test:
      //X, C, eventLastOf(C,X), --eventOfNeg(C,X)     |-   --negateEvents(conjDropIfLatest(C,X)), (Goal:DesireWeak, Time:TaskLastInBeliefNeg)
      X, C, eventLastOf(C,X)                        |- --conjDropIfLatest(C,X),   (Goal:DesireWeakN,Time:TaskLastInBeliefNeg)


    //negate events of anti-conj goal
    //C, X, eventOf(C,X) |- negateEvents(conjWithoutAll(C, X)), (Goal: StructuralDeductionN)

    //  filters to prevent deriving anti-goal if it appears in the precondition, was called: "conjDropIfLatestFiltered"
    //X, C, eventLastOf(C,X)    |- conjWithoutAll(C,  X), (Goal:Deduction,Time:TaskLastInBeliefPos)


    //TODO conjunction sequence suffix
    //TODO nal3 shortcut - decompose trailing intersection/union event

    //TODO conjunction sequence prefix

    C, X, eventFirstOf(C,X)    |- conjDropIfEarliest(C,  X), (Belief:Deduction,Goal:Deduction,Time:AfterBeliefInTask)
      C, X, eventFirstOf(C,X)    |- X, (Goal:StructuralDeduction)
        //C, X, eventFirstOf(C,X)    |- --X, (Goal:StructuralDeductionN)
    C, X, eventFirstOfNeg(C,X) |- conjDropIfEarliest(C,--X), (Belief:DeductionPN,Goal:DeductionPN,Time:AfterBeliefInTask)
      C, X, eventFirstOfNeg(C,X) |- --X, (Goal:StructuralDeduction)
        //C, X, eventFirstOfNeg(C,X) |- X, (Goal:StructuralDeductionN)


    //conditional disjunction decompose
    D, X, eventOfNeg(D,X) |- --conjWithout(D,--X), (Goal:DeductionNN,Time:TaskSubEvent)
    D, X, eventOf(D,X)    |- --conjWithout(D,  X), (Goal:DeductionNP,Time:TaskSubEvent)



          //Disjunction structural decompose: D = (||,a,b,..) = --(&&,--a, --b, ..)
          //   disabled: may be spam-like
            //D, X,conjParallel(D),  eventOfNeg(D,X)  |- --conjWithout(D,--X), (Belief:StructuralDeductionWeakN, Goal:StructuralDeductionWeakN)
            //D, X,conjParallel(D),  eventOf(D,X)     |- --conjWithout(D,X), (Belief:StructuralDeductionWeakN, Goal:StructuralDeductionWeakN)




//Anonymous Deduction and Abduction
    (V ==> X), X, is(V,"#"), --is(X,"#")      |- X, (Belief:StructuralReduction)
    (--V ==> X), X, is(V,"#"), --is(X,"#")    |- X, (Belief:StructuralReduction)
    (X ==> V), X, is(V,"#"), --is(X,"#")      |- X,   (Belief:StructuralAbduction)
    (--X ==> V), X, is(V,"#"), --is(X,"#")    |- --X, (Belief:StructuralAbduction)


//// implication-based decomposition ////////////////////////////////////////////////////////////////////////////////////

(A ==> C), B, is(C,"&&"), --is(B,"#")      |- unisubst((A ==> dropAnyEvent(C)), A, B), (Belief:StructuralReduction)
(C ==> A), B, isUnneg(C,"&&"), --is(B,"#") |- unisubst((dropAnyEvent(C) ==> A), A, B), (Belief:StructuralReduction)
  //not needed: (--C ==>A) since dropAnyEvent handles --C

  (A ==> C), B, task("?"), is(C,"&&"), --is(B,"#")       |- unisubst((A ==> dropAnyEvent(C)), A, B), (Punctuation:Question)
  (C ==> A), B, task("?"), isUnneg(C,"&&"), --is(B,"#")  |- unisubst((dropAnyEvent(C) ==> A), A, B), (Punctuation:Question)

//    (S ==> M), (C ==> M), eventOf(C,S) |- (conjWithout(C,S) ==> M), (Belief:DecomposeNP)
//    (--S ==> M), (C ==> M), eventOfNeg(C,S) |- (conjWithout(C,--S) ==> M), (Belief:DecomposeNegativePositivePositive)
//        //(S ==> M), ((&&,(--,%S),A..+) ==> M) |- ((&&,A..+) ==> M), (Belief:DecomposeNegativePositivePositiveN)
//        //(S ==> M), ((||,S,A..+) ==> M) |- ((||,A..+) ==> M), (Belief:DecomposePositiveNegativeNegative)
//
//    (M ==> S), (M ==> C), eventOf(C,S)    |- (M ==> conjWithout(C,S)), (Belief:DecomposeNP)
//    (M ==> S), (M ==> C), eventOfNeg(C,S) |- --(M ==> conjWithout(C,--S)), (Belief:DecomposePositiveNegativeNegativeN)
//        //(M ==> S), (M ==> (&&,(--,%S),A..+)) |- (M ==> (&&,A..+)), (Belief:DecomposePositiveNegativeNegativeN)
//        //(M ==> S), (M ==> (||,S,A..+)) |- (M ==> (||,A..+)), (Belief:DecomposeNegativePositivePositive)

