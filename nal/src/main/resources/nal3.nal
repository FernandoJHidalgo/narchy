//// inheritance composition ////////////////////////////////////////////////////////////////////////////////////
//If P and S are in the intension/extension of M, then union/difference and intersection can be built:
//The duality of extension and intension in NAL corresponds to the
//  duality of intersection and union in set theory â€” intensional intersection
//  corresponds to extensional union, and extensional intersection corresponds
//  to intensional union.

    (P --> M), (S --> M), notSetsOrDifferentSets(S,P),neq(S,P) |- ((polarize(P,task) | polarize(S,belief)) --> M), (Belief:IntersectionDepolarized, Time:Intersect)
    (P --> M), (S --> M), notSetsOrDifferentSets(S,P),neq(S,P) |- (unionSect(polarize(P,task),polarize(S,belief), "&") --> M), (Belief:UnionDepolarized, Time:Intersect)

    (M --> P), (M --> S), notSetsOrDifferentSets(S,P),neq(S,P) |- (M --> (polarize(P,task) & polarize(S,belief))), (Belief:IntersectionDepolarized, Time:Intersect)
    (M --> P), (M --> S), notSetsOrDifferentSets(S,P),neq(S,P) |- (M --> unionSect(polarize(P,task),polarize(S,belief), "|")), (Belief:UnionDepolarized, Time:Intersect)

//    (P --> M), (S --> M), notSetsOrDifferentSets(S,P), neqRCom(S,P) |- ((P ~ S) --> M), (Belief:Difference, Time:Intersect)
//    (P --> M), (S --> M), notSetsOrDifferentSets(S,P), neqRCom(S,P) |- ((S ~ P) --> M), (Belief:DifferenceReverse, Time:Intersect)
//
//    (M --> P), (M --> S), notSetsOrDifferentSets(S,P), neqRCom(S,P) |- (M --> (P - S)), (Belief:Difference, Time:Intersect)
//    (M --> P), (M --> S), notSetsOrDifferentSets(S,P), neqRCom(S,P) |- (M --> (S - P)), (Belief:DifferenceReverse, Time:Intersect)

        //(P --> M), (S --> M), is(P,"+"), is(S,"+") |- (differ(P,S) --> M), (Belief:Difference)
        //((A,B) --> M), ((X,Y) --> M), is(A,"+"), is(B,"+"), is(X,"+"), is(Y,"+") |- ((intersect(A,X),intersect(B,Y)) --> M), (Belief:Intersection)
        //((A,B) --> M), ((X,Y) --> M), is(A,"+"), is(B,"+"), is(X,"+"), is(Y,"+") |- ((union(A,X),union(B,Y)) --> M), (Belief:Union)

//NAL3 single premise decompose
    (M --> S), X, is(S,"&"), subOf(S,X)   |-      (M --> X), (Belief:StructuralDeduction,Goal:StructuralDeduction)
    (M --> S), X, is(S,"&"), subOf(S,--X)   |-      --(M --> X), (Belief:StructuralDeduction,Goal:StructuralDeduction)
        (M --> S), X, is(S,"&"), subOf(S,X)   |-     --(M --> X), (Goal:StructuralDeductionN)
      //(M --> S), X, is(S,"|"), subOf(S,X)   |-      --(M --> X), (Belief:StructuralDeductionNN)
      //(M --> S), X, is(S,"|"), subOf(S,--X)   |-      (M --> X), (Belief:StructuralDeductionNN)
      //(M --> S), X, is(S,"&"), subOf(S,X)   |-  --(M --> X), (Belief:StructuralDeductionNN)
    //(M --> S), X, is(S,"&"), subOf(S,--X) |-    --(M --> X), (Belief:StructuralDeduction)
      //(M --> S), X, is(S,"&"), subOf(S,--X) |-    (M --> X), (Belief:StructuralDeductionNN)

    (S --> M), X, is(S,"|"), subOf(S,X)   |-     (X --> M), (Belief:StructuralDeduction,Goal:StructuralDeduction)
    (S --> M), X, is(S,"|"), subOf(S,--X)   |-     --(X --> M), (Belief:StructuralDeduction,Goal:StructuralDeduction)
        (S --> M), X, is(S,"|"), subOf(S,X)   |-     --(X --> M), (Goal:StructuralDeductionN)

      //(S --> M), X, is(S,"&"), subOf(S,X)   |-     --(X --> M), (Belief:StructuralDeductionNN)
      //(S --> M), X, is(S,"&"), subOf(S,--X)   |-     (X --> M), (Belief:StructuralDeductionNN)
      //(S --> M), X, is(S,"|"), subOf(S,X)   |- --(X --> M), (Belief:StructuralDeductionNN)
    //(S --> M), X, is(S,"|"), subOf(S,--X) |-   --(X --> M), (Belief:StructuralDeduction)
      //(S --> M), X, is(S,"|"), subOf(S,--X) |-   (X --> M), (Belief:StructuralDeductionNN)


//// inheritance decomposition ////////////////////////////////////////////////////////////////////////////////////
//if (S --> M) is the case, and ((|,S,A..+) --> M) is not the case, then ((|,A..+) --> M) is not the case, hence Belief:DecomposePositiveNegativeNegative

//(M --> S), (M --> (|,S,A_1..n)) |- (M --> (|,A_1..n)), (Truth:DecomposeNegativePositivePositive) = NP
     (M --> X), (M --> S), is(S,"|"), subOf(S,X)    |- (M --> without(S,X)), (Belief:DecomposeNP,Time:Intersect)
//       (M --> X), (M --> S), is(S,"|"), subOf(S,--X)  |-  (M --> without(S,--X)), (Belief:DecomposePN)
//       (M --> X), (M --> S), is(S,"|"), subOf(S,X) |- --(M --> without(S,X)), (Belief:DecomposePP)
       (M --> X), (M --> S), is(S,"|"), subOf(S,--X)  |-  --(M --> without(S,--X)), (Belief:DecomposeNN,Time:Intersect)

//(M --> S), (M --> (&,S,A_1..n)) |- (M --> (&,A_1..n)), (Truth:DecomposePositiveNegativeNegative) = --PN
     (M --> X), (M --> S), is(S,"&"), subOf(S,X)   |- --(M --> without(S,X)), (Belief:DecomposePN,Time:Intersect)
       (M --> X), (M --> S), is(S,"&"), subOf(S,--X) |- --(M --> without(S,--X)), (Belief:DecomposeNN,Time:Intersect)
        //TODO

//(S --> M), ((|,S,A_1..n) --> M) |- ((|,A_1..n) --> M), (Truth:DecomposePositiveNegativeNegative) = --PN
     (X --> M), (S --> M), is(S,"|"), subOf(S,X)   |-   --(without(S,X) --> M), (Belief:DecomposePN,Time:Intersect)
       (X --> M), (S --> M), is(S,"|"), subOf(S,--X) |- --(without(S,--X) --> M), (Belief:DecomposeNN,Time:Intersect)
        //TODO

//(S --> M), ((&,S,A_1..n) --> M) |- ((&,A_1..n) --> M), (Truth:DecomposeNegativePositivePositive) = NP
     (X --> M), (S --> M), is(S,"&"), subOf(S,X)   |- (without(S,X) --> M), (Belief:DecomposeNP,Time:Intersect)
//       (X --> M), (S --> M), is(S,"&"), subOf(S,--X) |- (without(S,--X) --> M), (Belief:DecomposePP)
//      (X --> M), (S --> M), is(S,"&"), subOf(S,X)   |- --(without(S,X) --> M), (Belief:DecomposePP)
      (X --> M), (S --> M), is(S,"&"), subOf(S,--X) |- --(without(S,--X) --> M), (Belief:DecomposeNN,Time:Intersect)




//     //DIFFi
     //(M --> S), (M --> (S - P)) |- (M --> P), (Belief:DecomposeDiffX)
//       (M --> S), (M --> (|,S,--P,A..*)) |- (M --> P), (Belief:DecomposeDiffX,Time:Intersect)
     //(M --> P), (M --> (S - P)) |- (M --> S), (Belief:DecomposeDiffX)
//       (M --> P), (M --> (|,S,--P,A..*)) |- (M --> S), (Belief:DecomposeDiffX,Time:Intersect)
////        (M --> S), (M --> (S - P)) |- --(M --> P), (Belief:DecomposePP)
////        (M --> P), (M --> (S - P)) |- (M --> S), (Belief:DecomposeNP)
////
//     //DIFFe
     //(S --> M), ((S ~ P) --> M) |- (P --> M), (Belief:DecomposeDiffX)
//       (S --> M), ((&,S,--P,A..*) --> M) |- (P --> M), (Belief:DecomposeDiffX,Time:Intersect)
     //(P --> M), ((S ~ P) --> M) |- (S --> M), (Belief:DecomposeDiffX)
//       (P --> M), ((&,S,--P,A..*) --> M) |- (S --> M), (Belief:DecomposeDiffX,Time:Intersect)
////        (S --> M), ((S ~ P) --> M) |- --(P --> M), (Belief:DecomposePP)
////        (P --> M), ((S ~ P) --> M) |- (S --> M), (Belief:DecomposeNP)

//
     //similarity coercion (S==P)! (symmetric: DecomposeNegative....)
     ((S ~ P) --> M), (S --> M) |- (P --> M), (Goal:DecomposeDiff,Time:Intersect)
       //((&,--P,A..+) --> M), ((&,A..+) --> M) |- (P --> M), (Goal:DecomposeDiff,Time:Intersect) //not working yet
     (M --> (S - P)), (M --> S) |- (M --> P), (Goal:DecomposeDiff,Time:Intersect)
        ((S ~ P) --> M), (P --> M) |- (S --> M), (Goal:DecomposeDiff,Time:Intersect)
        (M --> (S - P)), (M --> P) |- (M --> S), (Goal:DecomposeDiff,Time:Intersect)
//
////     //difference --(S==P)! (asymmetric: DecomposePositive... )
//     ((S ~ P) --> M), (S --> M) |- --(P --> M), (Goal:DecomposePP,Time:Intersect)
//     (M --> (S - P)), (M --> S) |- --(M --> P), (Goal:DecomposePP,Time:Intersect)
//        ((S ~ P) --> M), (P --> M) |- (S --> M), (Goal:DecomposePN,Time:Intersect)
//        (M --> (S - P)), (M --> P) |- (M --> S), (Goal:DecomposePN,Time:Intersect)
//


//     //intersection conditional goal decompose
     (S --> M), (X --> M), is(S,"|"), subOf(S,X) |- (without(S, X) --> M), (Goal:DecomposePP,Time:Intersect)
       (S --> M), (X --> M), is(S,"|"), subOf(S,--X) |- (without(S, --X) --> M), (Goal:DecomposePN,Time:Intersect)
     (S --> M), (X --> M), is(S,"&"), subOf(S,X) |- (without(S, X) --> M), (Goal:DecomposePN,Time:Intersect)
       (S --> M), (X --> M), is(S,"&"), subOf(S,--X) |- (without(S, --X) --> M), (Goal:DecomposePP,Time:Intersect)
     (M --> S), (M --> X), is(S,"&"), subOf(S,X) |- (M --> without(S, X)), (Goal:DecomposePP,Time:Intersect)
       (M --> S), (M --> X), is(S,"&"), subOf(S,--X) |- (M --> without(S, --X)), (Goal:DecomposePN,Time:Intersect)
     (M --> S), (M --> X), is(S,"|"), subOf(S,X) |- (without(S, X) --> M), (Goal:DecomposePN,Time:Intersect)
       (M --> S), (M --> X), is(S,"|"), subOf(S,--X) |- (without(S, --X) --> M), (Goal:DecomposePP,Time:Intersect)

//     (M --> (&,P,S,A..*)), (M --> S) |- (M --> P), (Goal:DecomposePP,Time:Intersect)
//     (M --> (|,P,S,A..*)), (M --> S) |- (M --> P), (Goal:DecomposePN,Time:Intersect)




    //(S --> M), X, is(S,"&"), subPosOrNeg(S,X) |- (withoutPosOrNeg(S,X) --> M), (Belief:StructuralDeduction)
        //(S --> M), X, is(S,"|"), subOfNeg(S,X) |- (without(S,--X) --> M), (Belief:StructuralDeduction)

//    (S --> (B - G)), B |- (S --> B), (Belief:StructuralDeduction)
//        (S --> (B - G)), G |- --(S --> G), (Belief:StructuralDeduction)
//
//    ((B ~ G) --> S), B |- (B --> S), (Belief:StructuralDeduction)
//        ((B ~ G) --> S), G |- --(G --> S), (Belief:StructuralDeduction)

    //raw
    //S, X, is(S,"|"), subPosOrNeg(S,X) |- without(S,X), (Belief:StructuralDeduction)

            //B, (B ~ G), task("@") |- G, (Punctuation:Quest)
            //G, (B ~ G), task("@") |- B, (Punctuation:Quest)


        //1D:
        //(X --> C), (X --> C), is(X,"+") |- (dropAnySet(X) --> C), (Belief:StructuralDeduction)
            //(Y --> M), (X --> M), is(Y,"+"), is(X,"+") |- (differ(Y,X) --> M), (Belief:StructuralDeduction)

        //2D:
        //((X,Y) --> C), ((X,Y) --> C), is(X,"+") |- ((dropAnySet(X),Y) --> C), (Belief:StructuralDeduction)
        //((X,Y) --> C), ((X,Y) --> C), is(Y,"+") |- ((X,dropAnySet(Y)) --> C), (Belief:StructuralDeduction)



//Difference Goal Decompose TODO review

//        //DIFFi
//        (S-->B), (S --> (B - G)) |- (S --> G), (Goal:DecomposeDiff)
//        (S-->G), (S --> (B - G)) |- (S --> B), (Goal:DecomposeDiffX)
//
//        //DIFFe
//        (B-->S), ((B ~ G) --> S) |- (G --> S), (Goal:DecomposeDiff)
//        (G-->S), ((B ~ G) --> S) |- (B --> S), (Goal:DecomposeDiffX)

//            //Raw DIFFe
//            B, (B ~ G) |- G, (Goal:DecomposeDiff)
//            G, (B ~ G) |- B, (Goal:DecomposeDiffX)


//experimental


        //if want X > Y ie. (X ~ Y), then to the extent that X == Y, decrease Y while increasing X
        //S:(X ~ Y), S:(X ~ Y), task("!") |- (S:X && (--,S:Y)), (Goal:WeakPN)
        //(X - Y):S, (X - Y):S, task("!") |- (X:S && (--,Y:S)), (Goal:WeakPN)
        //(X ~ Y), (X ~ Y), task("!") |- (X && --Y), (Goal:WeakPN)

        //if want X == Y ie. --(X ~ Y), then to the extent that X > Y, increase Y while decreasing X
        //S:(X ~ Y), S:(X ~ Y), task("!") |- (S:Y && (--,S:X)), (Goal:WeakN)
        //(X - Y):S, (X - Y):S, task("!") |- (Y:S && (--,X:S)), (Goal:WeakN)
        //(X ~ Y), (X ~ Y), task("!") |- (Y && --X), (Goal:WeakN)

//     (M --> (S - P)), (M --> S), task("!") |- (M --> P), (Goal:DecomposePositiveNegativeNegative)
//     (M --> (S - P)), (M --> P), task("!") |- (M --> S), (Goal:DecomposeNegativeNegativeNegative)

//raw product composition, may be redundant because general induction via && does the equivalent
//  (already in induction.nal)
 //    A, B, task("*"), belief("*") |- (A | B), (Belief:Intersection)
 //   A, B, task("*"), belief("*") |- (A & B), (Belief:Union)
//    A, B, task("*"), belief("*"), neq(A,B) |- (A - B), (Belief:Difference)
//    A, B, task("*"), belief("*"), neq(A,B) |- (B - A), (Belief:DifferenceReverse)

//Theorem 24
//(S-->P) |- ((S & X) --> (P | X))
//(S-->P) |- ((S | X) --> (P & X))
//(S<->P) |- ((S & X) <-> (P | X))
//(S<->P) |- ((S | X) <-> (P & X))