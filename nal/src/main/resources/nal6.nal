    //strong unification
    //      should these be restricted to "$" var subst
    (Y ==> X), Z, notImpl(Z)     |- subIfUnifiesAny(X,Y,Z), (Belief:DeductionPB)
    //(Y ==> X), Z, notImpl(Z)     |- subIfUnifiesAny((--,X),Y,Z), (Belief:DeductionN)
    (--Y ==> X), Z, notImpl(Z)   |- subIfUnifiesAny(X,Y,Z), (Belief:DeductionPB)
    //(--Y ==> X), Z, notImpl(Z)   |- subIfUnifiesAny((--,X),Y,Z), (Belief:DeductionNN)

    (X ==> Y), Z, notImpl(Z)     |- subIfUnifiesAny(X,Y,Z), (Belief:AbductionPB)

// Conditional syllogism && Independent Variable Elimination
//      If after M, P usually happens, and M happens, it means P is expected to happen
// original:
//    M, (M ==> P), shift_occurrence_forward(M,"==>")  |- P, (Truth:Deduction, Desire:Induction, Order:ForAllSame)
//    M, (P ==> M), shift_occurrence_backward(P,"==>") |- P, (Truth:Abduction, Desire:Deduction, Order:ForAllSame)

    B, (A ==> C),  notImpl(B) |- subIfUnifiesAny(C,A,B), (Belief:Deduction, Goal:Induction)

    B, (A ==> C),  notImpl(B) |- (--,subIfUnifiesAny(C,A,B)), (Belief:DeductionPN, Goal:InductionPN)

    B, (--A ==> C),  notImpl(B) |- subIfUnifiesAny(C,A,B), (Belief:DeductionN, Goal:DeciInductionN)
    B, (--A ==> C),  notImpl(B) |- (--,subIfUnifiesAny(C,A,B)), (Belief:DeductionNN, Goal:InductionNN)

    B, (C ==> A), notImpl(B) |- subIfUnifiesAny(C,A,B), (Belief:Abduction, Goal:Deduction)
    B, (C ==> A), notImpl(B) |- subIfUnifiesAny(C,A,B), (Belief:AbductionNN, Goal:DeductionNN)
        B, ((&&,C,A..+) ==> X), notImpl(B) |- subIfUnifiesAny((X &&+- A..+),C,B), (Belief:Deduction, Goal:Induction)
        B, ((&&,--C,A..+) ==> X), notImpl(B) |- subIfUnifiesAny((X &&+- A..+),C,B), (Belief:DeductionN, Goal:InductionN)
            B, ((&&,C,A..+) ==> X), neq(B,C), notImpl(B) |- subIfUnifiesAny(((&&,A..+) ==>+- X),C,B), (Belief:Deduction)
            B, ((&&,--C,A..+) ==> X), neq(B,C), notImpl(B) |- subIfUnifiesAny(((&&,A..+) ==>+- X),C,B), (Belief:DeductionN)
        B, (X ==> (&&,C,A..+)), notImpl(B) |- subIfUnifiesAny((X &&+- A..+),C,B), (Belief:Abduction, Goal:Deduction)
        B, (X ==> (&&,--C,A..+)), notImpl(B) |- subIfUnifiesAny((X &&+- A..+),C,B), (Belief:AbductionN, Goal:DeductionN)
            B, (X ==> (&&,C,A..+)), neq(B,C), notImpl(B) |- subIfUnifiesAny((X ==>+- (&&,A..+)),C,B), (Belief:Abduction)
            B, (X ==> (&&,--C,A..+)), neq(B,C), notImpl(B) |- subIfUnifiesAny((X ==>+- (&&,A..+)),C,B), (Belief:AbductionN)

            //(Y --> P), ((&&,(X-->P),A..+) ==> Z),neq(X,Y) |- subIfUnifiesAny(((&&,(X-->P),A..+) ==>+- Z), X,Y,strict), (Belief:Deduction)
              //  (Y --> P), ((&&,--(X-->P),A..+) ==> Z),neq(X,Y) |- subIfUnifiesAny(((&&,--(X-->P),A..+) ==>+- Z), X,Y,strict), (Belief:DeductionN)
            //(Y --> P), (Z ==> (&&,(X-->P),A..+)),neq(X,Y) |- subIfUnifiesAny((Z ==>+- (&&,(X-->P),A..+)), X,Y,strict), (Belief:Deduction)
              //  (Y --> P), (Z ==> (&&,--(X-->P),A..+)),neq(X,Y) |- subIfUnifiesAny((Z ==>+- (&&,--(X-->P),A..+)), X,Y,strict), (Belief:DeductionN)

    //Y, (B ==> (&&,X,A..+)) |- subIfUnifiesAny((B ==>+- (&&,A..+)),X,Y), (Belief:Deduction)
    //Y, (B ==> (&&,--X,A..+)) |- subIfUnifiesAny((B ==>+- (&&,A..+)),X,Y), (Belief:DeductionN)

    //Y, ((&&,X,A..+) ==> B) |- subIfUnifiesAny((X ==>+- B),X,Y), (Belief:Deduction)
    //Y, ((&&,--X,A..+) ==> B) |- subIfUnifiesAny((--X ==>+- B),X,Y), (Belief:DeductionN)

        //((&&,M,X,A..*) ==> C), (Y ==> C), task(".") |- subIfUnifiesAny((M ==>+- C),X,Y), (Belief:AbductionPB)
        //((&&,M,A..+) ==> X), ((&&,A..+) ==> Y), task(".") |- subIfUnifiesAny((M ==>+- C),X,Y,"$"), (Belief:AbductionPB)


//// implication-based syllogism ////////////////////////////////////////////////////////////////////////////////////
//       (A ==> B) ------- (B ==> C)
//            \               /
//             \             /
//              \           /
//               \         /
//                (A ==> C)

    //"Please note that the temporal order in the conclusion of a weak rule is
    //not necessarily the same as the order in the premises, given the hypothetical
    //nature of such a rule."

    //If after S M happens, and after M P happens, so P happens after S
    (M ==> P), (S ==> M) |- (S ==>+- P), (Belief:Deduction)

      (M ==> P), (--S ==> M), neqRCom(S,P), task(".") |- (S ==>+- P), (Punctuation:Question)
      (M ==> P), (S ==> M), neqRCom(S,P), task("?") |- (S ==>+- P), (Punctuation:Question)
      (M ==> P), (S ==> M), neqRCom(S,P), task("?") |- (P ==>+- S), (Punctuation:Question)

        //(S ==> M), (M ==> P) |- (S ==>+- P), (Belief:Deduction)


        //experimental:
            //(S ==> M), (--M ==> P) |- (S ==>+- P), (Belief:DeductionN)

    (M ==> S), (M ==> P) |- (S ==>+- P), (Belief:Abduction)

      (M ==> S), (M ==> P), neqRCom(S,P), task("?") |- (S ==>+- P), (Punctuation:Question)
      (M ==> S), (M ==> P), neqRCom(S,P), task("?") |- (P ==>+- S), (Punctuation:Question)

    (P ==> M), (S ==> M) |- (P ==>+- S), (Belief:Induction)

      (P ==> M), (S ==> M), neqRCom(S,P), task("?") |- (S ==>+- P), (Punctuation:Question)
      (P ==> M), (S ==> M), neqRCom(S,P), task("?") |- (P ==>+- S), (Punctuation:Question)

    (P ==> M), (M ==> S) |- (S ==>+- P), (Belief:Exemplification)

      (P ==> M), (--M ==> S), neqRCom(S,P), task(".") |- (S ==>+- P), (Punctuation:Question)
      (P ==> M), (M ==> S), neqRCom(S,P), task("?") |- (S ==>+- P), (Punctuation:Question)
      (P ==> M), (M ==> S), neqRCom(S,P), task("?") |- (P ==>+- S), (Punctuation:Question)

        //(M ==> S), (P ==> M) |- (S ==>+- P), (Belief:Exemplification)
        //experimental:
            //(P ==> M), (--M ==> S) |- (S ==>+- P), (Belief:ExemplificationN)


    //the comparison rules here emulates what Comparison did in generating <=> which are modeled here as a pair of opposing ==>
    //untested
//    (P ==> M), (S ==> M) |- (S ==>+- P), (Belief:Comparison)
//        (P ==> M), (S ==> M) |- (P ==>+- S), (Belief:Comparison)
//    (M ==> P), (M ==> S) |- (S ==>+- P), (Belief:Comparison)
//        (M ==> P), (M ==> S) |- (P ==>+- S), (Belief:Comparison)


// Contraposition (structural)
// "If not smoking causes health, being not healthy may be the result of smoking"
// "If smoking causes not health, being healthy may be the result of not smoking"

// original:	    ( --S ==> P),   P |- ( --P ==> S), (Truth:Contraposition, Derive:AllowBackward)
// original:	    ( --S ==> P), --S |- ( --P ==> S), (Truth:Contraposition, Derive:AllowBackward)

    ( --S ==> P), P |- ( --P ==>+- S), (Belief:Contraposition)
    //( --S ==> P), P |- ( P ==>+- S), (Belief:ContrapositionN)



//// implication-based composition ////////////////////////////////////////////////////////////////////////////////////
    //Same as for inheritance


    //impl subjects are not truth symmetric
    (P ==> M), (S ==> M), neq(P,S) |- ((P &&+- S) ==>+- M), (Belief:IntersectionSym)
    (P ==> M), (S ==> M), neq(P,S) |- (--(--P &&+- --S) ==>+- M), (Belief:UnionSym)

    //impl predicates are truth symmetric
    (M ==> P), (M ==> S), neq(P,S) |- (M ==>+- (polarize(P,task) &&+- polarize(S,belief))), (Belief:IntersectionDepolarized)
    (M ==> P), (M ==> S), neq(P,S) |- (M ==>+- --((--,polarize(P,task)) &&+- (--,polarize(S,belief)))), (Belief:UnionDepolarized)


//// implication-based decomposition ////////////////////////////////////////////////////////////////////////////////////
//Same as for inheritance again


    (S ==> M), (C ==> M), eventOf(C,S) |- (conjWithout(C,S) ==>+- M), (Belief:DecomposeNegativePositivePositive)
    (S ==> M), (C ==> M), eventOfNeg(C,S) |- (conjWithout(C,--S) ==>+- M), (Belief:DecomposeNegativePositivePositiveN)
        //(S ==> M), ((&&,(--,%S),A..+) ==> M) |- ((&&,A..+) ==>+- M), (Belief:DecomposeNegativePositivePositiveN)
        //(S ==> M), ((||,S,A..+) ==> M) |- ((||,A..+) ==>+- M), (Belief:DecomposePositiveNegativeNegative)

    (M ==> S), (M ==> C), eventOf(C,S) |- (M ==>+- conjWithout(C,S)), (Belief:DecomposePositiveNegativeNegative)
    (M ==> S), (M ==> C), eventOfNeg(C,S) |- (M ==>+- conjWithout(C,--S)), (Belief:DecomposePositiveNegativeNegativeN)
        //(M ==> S), (M ==> (&&,(--,%S),A..+)) |- (M ==>+- (&&,A..+)), (Belief:DecomposePositiveNegativeNegativeN)
        //(M ==> S), (M ==> (||,S,A..+)) |- (M ==>+- (||,A..+)), (Belief:DecomposeNegativePositivePositive)


    (M ==> C), C, is(C,"&&") |- (M ==>+- dropAnyEvent(C)), (Belief:StructuralReduction)
    //(M ==> C), C, is(C,"&&") |- (--,(M ==>+- dropAnyEvent(C))), (Belief:StructuralReductionN)
          //(M ==> C), D, belief("&&") |- (M ==>+- subIfUnifiesAny(dropAnyEvent(C), same, D)), (Belief:StructuralDeduction)
        //(--M ==> C), C, belief("&&") |- (--M ==>+- dropAnyEvent(C)), (Belief:StructuralDeduction)
          //(--M ==> C), D, belief("&&") |- (--M ==>+- subIfUnifiesAny(dropAnyEvent(C), same, D, strict)), (Belief:StructuralDeduction)
        //(M ==> (&&,(--,%S),A..+)), M |- (M ==>+- (&&,A..+)), (Belief:StructuralDeduction)
    (C ==> M), C, is(C,"&&") |- (dropAnyEvent(C) ==>+- M), (Belief:StructuralReduction)
        ((--,C) ==> M), C, is(C,"&&") |- ((--,dropAnyEvent(C)) ==>+- M), (Belief:StructuralReduction)
    //TODO StructuralDeductionN like previous?

          //(C ==> M), D, belief("&&") |- (subIfUnifiesAny(dropAnyEvent(C), same, D) ==>+- M), (Belief:StructuralDeduction)
        //(C ==> --M), C, belief("&&") |- (dropAnyEvent(C) ==>+- --M), (Belief:StructuralDeduction)
          //(C ==> --M), D, belief("&&") |- (subIfUnifiesAny(dropAnyEvent(C), same, D, strict) ==>+- --M), (Belief:StructuralDeduction)
                //((&&,(--,%S),A..+) ==> M), M |- ((&&,A..+) ==>+- M), (Belief:StructuralDeduction)






    //answering
    //Z, (X==>Y), task("?") |- subIfUnifiesAny((X ==>+- Z), Y, Z, "$", strict), (Belief:BeliefStructuralDeduction, Punctuation:Belief)
        //Z, (X==>Y), task("?") |- subIfUnifiesAny(Y, X, Z, strict), (Belief:BeliefStructuralDeduction, Punctuation:Belief)
    //Z, (X==>Y), task("?") |- subIfUnifiesAny((Z ==>+- Y), X, Z, "$", strict), (Belief:BeliefStructuralAbduction, Punctuation:Belief)
    //Z, (--X==>Y), task("?") |- subIfUnifiesAny((--Z ==>+- Y), X, Z, "$", strict), (Belief:BeliefStructuralAbduction, Punctuation:Belief)
        //Z, (X==>Y), task("?") |- subIfUnifiesAny(X, Y, Z, strict), (Belief:BeliefStructuralAbduction, Punctuation:Belief)


    //B, (C && A), task("!"), time(urgent) |- subIfUnifiesAny(C,A,B), (Goal:Strong)
    //B, (C && (--,%A)), task("!"), time(urgent) |- subIfUnifiesAny(C,A,B), (Goal:StrongN)
        //B, (C && A) |- (--,subIfUnifiesAny(C,A,B)), (Goal:StrongN)
        //B, (C && (--,%A)) |- subIfUnifiesAny(C,A,B), (Goal:StrongN)



//// multi-conditional syllogism ////////////////////////////////////////////////////////////////////////////////////
//Inference about the pre/postconditions

//    ((&&,M,A_1..n) ==> C), M, not_implication_or_equivalence(M) |- ((&&,A_1..n) ==> C), (Truth:Deduction, Order:ForAllSame)
//    ((&&,M,A_1..n) ==> C), ((&&,A_1..n) ==> C) |- M, (Truth:Abduction, Order:ForAllSame)

//conditional deduction/abduction
//   original:   ((&&,M,A_1..n) ==> C), M, not_implication_or_equivalence(M) |- ((&&,A_1..n) ==> C), (Truth:Deduction, Order:ForAllSame)
//   original:   ((&&,M,A_1..n) ==> C), (A ==> M) |- ((&&,A,A_1..n) ==> C), (Truth:Deduction, Order:ForAllSame)
//   original:   ((&&,M,A_1..n) ==> C), ((&&,A_1..n) ==> C) |- M, (Truth:Abduction, Order:ForAllSame)
//   original:   ((&&,A,A_1..n) ==> C), (A ==> M) |- ((&&,M,A_1..n) ==> C), (Truth:Abduction, Order:ForAllSame)
//   original:   ((&&,A_1..n) =\> C), M, not_implication_or_equivalence(M) |- ((&&,M,A_1..n) =\> C), (Truth:Induction)
//   original:   ((&&,M,A_1..n) ==> C), ((&&,A,A_1..n) ==> C) |- (A ==> M), (Truth:Induction, Order:ForAllSame)

    (X ==> C), M, eventOf(X,M) |- (conjWithout(X,M) ==>+- C), (Belief:Deduction)
    (X ==> C), M, eventOfNeg(X,M) |- (conjWithout(X,--M) ==>+- C), (Belief:DeductionPN)

        //((&&,M,A..+) ==> C), M,                  |- ((&&,A..+) ==>+- C), (Belief:Deduction)
    (X ==> C), (B==>M), eventOf(X,M) |- ((conjWithout(X,M) &&+- B) ==>+- C), (Belief:Deduction)
    (X ==> C), (B==>M), eventOfNeg(X,M) |- ((conjWithout(X,--M) &&+- B) ==>+- C), (Belief:DeductionPN)
        //((&&,M,A..+) ==> C), (B ==> M), neq(B,M) |- ((&&,B,A..+) ==>+- C), (Belief:Deduction)


    (C ==> (&&,X,A..+)), (C ==> (&&,Y,A..+))   |- (X ==>+- Y), (Belief:Abduction)
    (C ==> (&&,X,A..+)), (C ==> (&&,Y,A..+))   |- (Y ==>+- X), (Belief:Abduction)
        ((&&,M,A..+) ==> C), ((&&,A..+) ==> C)   |- M, (Belief:AbductionPB)
        ((&&,M,A) ==> C),    (A ==> C)           |- M, (Belief:AbductionPB)


    ((&&,X,A..+) ==> C), ((&&,Y,A..+) ==> C)   |- (X ==>+- Y), (Belief:Induction)
    ((&&,X,A..+) ==> C), ((&&,Y,A..+) ==> C)   |- (Y ==>+- X), (Belief:Induction)

    (X ==> C), (B==>M), eventOf(X,B) |- ((conjWithout(X,B) &&+- M) ==>+- C), (Belief:AbductionPB)
        (X ==> C), (B==>M), eventOfNeg(X,B) |- ((conjWithout(X,--B) &&+- M) ==>+- C), (Belief:AbductionPB)
        //((&&,B,A..+) ==> C), (B ==> M), neq(B,M) |- ((&&,M,A..+) ==>+- C), (Belief:AbductionPB)


        //((&&,A..+) ==> C), M,                    |- ((&&,M,A..+) ==>+- C), (Belief:Induction)



//// propositional decomposition ////////////////////////////////////////////////////////////////////////////////////
//If S is the case, and (&&,S,A..+) is not the case, it can't be that (&&,A..+) is the case

//SUSPECT
    S, (&&,S,A..+), task(".") |- (&&,A..+), (Belief:DecomposePositiveNegativeNegative)
        //S, (||,S,A..+) |- (||,A..+), (Belief:DecomposeNegativePositivePositive)
    S, (&&,--S,A..+), task(".") |- (&&,A..+), (Belief:DecomposePositiveNegativeNegativeN)
        //S, (||,(--,%S),A..+) |- (||,A..+), (Belief:DecomposePositivePositivePositive)





//Can be derived by NAL7 rules so this won't be necessary there (Order:ForAllSame left out here)

//the first rule does not have Order:ForAllSame because it would be invalid, see: https://groups.google.com/forum/#!topic/open-nars/r5UJo64Qhrk
    //the strange composition of && is to preserve temporality

    ((&&,M,A..+) ==> C), (B ==> M)  |- (((&&,A..+) &&+- B) ==>+- C), (Belief:Deduction)
    ((&&,B,A..+) ==> C), (B ==> M)  |- (((&&,A..+) &&+- M) ==>+- C), (Belief:Induction)
    //(X ==> C), Y,  notImpl(M) |- ((X &&+- Y) ==>+- C), (Belief:Induction)

    //ConjunctionContradictionInduction
    ((&&,X,A..+) ==> C), (D ==> C), eventOfNeg(D,X)  |- ((&&,A..+) ==>+- C), (Belief:Induction)


//precondition combiner inference rule (variable_unification6):

    ((&&,C,A..+) ==> X), ((&&,C,B..+) ==> Y) |- subIfUnifiesAny(((&&,A..+) ==>+- (&&,B..+)),X,Y,"$"), (Belief:InductionPB)
    ((&&,C,A..+) ==> X), ((&&,C,B..+) ==> Y) |- subIfUnifiesAny(((&&,B..+) ==>+- (&&,A..+)),X,Y,"$"), (Belief:InductionPB)
        (--(&&,C,A..+) ==> X), ((&&,C,B..+) ==> Y) |- subIfUnifiesAny((--(&&,A..+) ==>+- (&&,B..+)),X,Y,"$"), (Belief:InductionPB)
        (--(&&,C,A..+) ==> X), ((&&,C,B..+) ==> Y) |- subIfUnifiesAny(--((&&,B..+) ==>+- (&&,A..+)),X,Y,"$"), (Belief:InductionPB)
    (X ==> (&&,C,A..+)), (Y ==> (&&,C,B..+)) |- subIfUnifiesAny(((&&,A..+) ==>+- (&&,B..+)),X,Y,"$"), (Belief:AbductionPB)
    (X ==> (&&,C,A..+)), (Y ==> (&&,C,B..+)) |- subIfUnifiesAny(((&&,B..+) ==>+- (&&,A..+)),X,Y,"$"), (Belief:AbductionPB)
        //((&&,C,A..+) ==> Z), ((&&,C,B..+) ==> Z), neq(A..+,B..+) |- ((&&,A..+) ==>+- (&&,B..+)), (Belief:Induction)
        //((&&,C,A..+) ==> Z), ((&&,C,B..+) ==> Z), neq(A..+,B..+) |- ((&&,B..+) ==>+- (&&,A..+)), (Belief:Induction)
        //(Z ==> (&&,C,A..+)), (Z ==> (&&,C,B..+)), neq(A..+,B..+) |- ((&&,A..+) ==>+- (&&,B..+)), (Belief:Abduction)
        //(Z ==> (&&,C,A..+)), (Z ==> (&&,C,B..+)), neq(A..+,B..+) |- ((&&,B..+) ==>+- (&&,A..+)), (Belief:Abduction)

    //((&&,X,A..+) ==> C), ((&&,Y,A..+) ==> C), neq(X,Y) |- (X ==>+- Y), (Belief:InductionPB)
    //((&&,X,A..+) ==> C), ((&&,Y,A..+) ==> C), neq(X,Y) |- (Y ==>+- X), (Belief:InductionPB)
    //(C ==> (&&,X,A..+)), (C ==> (&&,Y,A..+)), neq(X,Y) |- (X ==>+- Y), (Belief:AbductionPB)
    //(C ==> (&&,X,A..+)), (C ==> (&&,Y,A..+)), neq(X,Y) |- (Y ==>+- X), (Belief:AbductionPB)
        //((&&,B,A..+) ==> C), ((&&,A..+) ==> C) |- (B ==>+- C), (Belief:Induction)



//conditional abduction by dependent variable

    ((X --> R) ==> Z), ((&&,(#Y --> B),(#Y --> R),A..*) ==> Z)  |- (X --> B), (Belief:AbductionPB)
        (--(X --> R) ==> Z), ((&&,(#Y --> B),--(#Y --> R),A..*) ==> Z) |- (X --> B), (Belief:AbductionPB)


// conditional deduction "An inverse inference has been implemented as a form of deduction" https://code.google.com/p/open-nars/issues/detail?id=40&can=1

//    (U --> L), ((&&,(#X --> L),(#X --> R),A..*) ==> Z), neq(U,R) |- substitute((((&&,A..*) &&+- (U --> R)) ==>+- Z),#X,U), (Belief:Deduction)
//        (U --> L), ((&&,--(#X --> L),(#X --> R),A..*) ==> Z), neq(U,R) |- substitute((((&&,A..*) &&+- (U --> R)) ==>+- Z),#X,U), (Belief:DeductionN)



//// second level variable handling rules ////////////////////////////////////////////////////////////////////////////////////
//second level variable elimination (termlink level2 growth needed in order for these rules to work)

    (B --> K), (&&,(#X --> L),(($Y --> K) ==> A)) |- substitute(((#X --> L) &&+- A), $Y, B), (Belief:Deduction)
        (B --> K), (&&,(#X --> L),((--,($Y --> K)) ==> A)) |- substitute(((#X --> L) &&+- A), $Y, B), (Belief:DeductionN)
      //(K --> B), (&&,(#X --> L),((K --> $Y) ==> A)) |- substitute(((#X --> L) &&+- A), $Y, B), (Belief:Deduction)
        //(K --> B), (&&,(#X --> L),((--,(K --> $Y)) ==> A)) |- substitute(((#X --> L) &&+- A), $Y, B), (Belief:DeductionN)

    (B --> K), (($X --> L) ==> (&&,(#Y --> K),A..+)) |- substitute((($X --> L) ==>+- (&&,A..+)),#Y,B), (Belief:AnonymousAnalogy)
        (B --> K), (($X --> L) ==> (&&,--(#Y --> K),A..+)) |- substitute((($X --> L) ==>+- (&&,A..+)),#Y,B), (Belief:AnonymousAnalogyN)
        //TODO reversals if they are included

    (Y --> P), (&&,(X-->P),A..+), neq(X,Y) |- subIfUnifiesAny((&&,A..+), X,Y,strict), (Belief:Deduction)
        (Y --> P), (&&,--(X-->P),A..+), neq(X,Y) |- subIfUnifiesAny((&&,A..+), X,Y,strict), (Belief:DeductionN)

    //(Y --> P), (&&,(X-->P),A..+),neq(X,Y) |- subIfUnifiesAny((&&,(X-->P),A..+), X,Y,strict), (Belief:Deduction)
        //(Y --> P), (&&,--(X-->P),A..+),neq(X,Y) |- subIfUnifiesAny((&&,--(X-->P),A..+), X,Y,strict), (Belief:DeductionN)
      //(P --> Y), (&&,(P-->X),A..+),neq(X,Y) |- subIfUnifiesAny((&&,(P-->X),A..+), X,Y,strict), (Belief:Deduction)
        //  (P --> Y), (&&,--(P-->X),A..+),neq(X,Y) |- subIfUnifiesAny((&&,--(P-->X),A..+), X,Y,strict), (Belief:DeductionN)

      //(P --> Y), ((&&,(P-->X),A..+) ==> Z),neq(X,Y) |- subIfUnifiesAny(((&&,(P-->X),A..+) ==>+- Z), X,Y,strict), (Belief:Deduction)
          //(P --> Y), ((&&,--(P-->X),A..+) ==> Z),neq(X,Y) |- subIfUnifiesAny(((&&,--(P-->X),A..+) ==>+- Z), X,Y,strict), (Belief:DeductionN)

      //(P --> Y), (Z ==> (&&,(P-->X),A..+)),neq(X,Y) |- subIfUnifiesAny((Z ==>+- (&&,(P-->X),A..+)), X,Y,strict), (Belief:Deduction)
        //(P --> Y), (Z ==> (&&,--(P-->X),A..+)),neq(X,Y) |- subIfUnifiesAny((Z ==>+- (&&,--(P-->X),A..+)), X,Y,strict), (Belief:DeductionN)




//// conjunction decompose AND dependent variable elimination - decomposition with elimination of a variable


    //see: https://en.wikipedia.org/wiki/Imperative_logic#Ross.27_Paradox


    //X is the desired outcome. C is a sequence ending in it.  this forms a goal of the sequence minus the trailing
    X, C, belief("&&"), eventOf(C,X) |- ifNeqRoot(conjDropIfLatest(C,X),--X), (Goal:Strong)
    //X is the desired non-outcome.  C is a sequence ending in it.   this forms a goal of the sequence minus the trailing
    X, C, belief("&&"), eventOfNeg(C,X) |- ifNeqRoot(conjDropIfLatest(C,--X), X), (Goal:StrongN)
    //X is the desired non-outcome. C is a sequence ending in it.  this forms a weak antigoal of the sequence minus the trailing
    X, C, belief("&&"), eventOfNeg(C,X) |- ifNeqRoot((--,conjDropIfLatest(C,--X)), X), (Goal:Strong)
    //X is the undesired outcome. C is a sequence ending in it.  this forms a weak antigoal of the sequence minus the trailing
    X, C, belief("&&"), eventOf(C,X) |- ifNeqRoot((--,conjDropIfLatest(C,X)), --X), (Goal:StrongN)

    //B, C, belief("&&+"), task("!"), time(urgent) |- subIfUnifiesAny(conjEvent(C,early),conjEvent(C,late),B), (Goal:Strong)
    //B, C, belief("&&+"), task("!"), time(urgent) |- subIfUnifiesAny(conjEvent(C,early),--conjEvent(C,late),B), (Goal:StrongN)

    C, X, task("&&"), eventOf(C,X) |- conjDropIfEarliest(C,X), (Goal:Induction)
    C, X, task("&&"), eventOfNeg(C,X) |- conjDropIfEarliest(C,--X), (Goal:InductionPN)
        //(&&,X,A..+), X, task("!") |- X, (Goal:Strong)
        //(&&,--X,A..+), X, task("!") |- X, (Goal:StrongPN)

    //structural decompose any component of a conjunction.
    //C, X, task("&&"), in(X,C)  |- conjWithout(C, X), (Belief:StructuralDeduction, Goal:StructuralDeduction)

    //C, X, task("&&"), eventOfPosOrNeg(X,C)  |- conjWithout(C,X), (Belief:StructuralDeduction, Goal:StructuralDeduction)
    C, X, task("&&"), eventOf(C,X)   |- conjWithout(C,X), (Belief:StructuralDeduction, Goal:StructuralDeduction)
    C, X, task("&&"), eventOfNeg(C,X) |- conjWithout(C,--X), (Belief:StructuralDeduction, Goal:StructuralDeduction)

    //C, X, task(negative), task("&&"), in(X,C)  |- (--,dropAnyEvent(C)), (Goal:StructuralDeduction)


    //for goal: if eternal and paral (goal seq must be decomposed sequentially use &&| and add separate rule
    //C, X, task("&&") |- dropAnyEvent(C), (Goal:StructuralDeduction)


    //(&&,A_1..n), A_i |- A_i, (Truth:StructuralDeduction, Desire:Strong)
    //SUSPECT:
        //(&&,X,A..+), X, task("!") |- X, (Goal:Strong)
        //(&&,(--,%X),A..+), X, task("!") |- (--,%X), (Goal:StrongPN)


//Anonymous Analogy (NAL5)
    //originally this only unified depvar (dep var elimination)
     (&&,X,A..+), Y   |- subIfUnifiesAny((&&,A..+),X,Y,"#"), (Belief:AnonymousAnalogy)
            //, isNot(X,"#")
     (&&,--X,A..+), Y   |- subIfUnifiesAny((&&,A..+),X,Y,"#"), (Belief:AnonymousAnalogyPN)
            //, isNot(X,"#")


     //((&&,X,A..+) && Z), Z |- (X &&+- Z), (Belief:StructuralDeduction, Goal:StructuralDeduction)
     //(Z && (&&,X,A..+)), Z |- (Z &&+- X), (Belief:StructuralDeduction, Goal:StructuralDeduction)
        //((&&,X,A..+) && (--,%Z)), Z |- (X &&+- (--,%Z)), (Belief:StructuralDeduction, Goal:StructuralDeduction)
        //((--,%Z) && (&&,X,A..+)), Z |- ((--,%Z) &&+- X), (Belief:StructuralDeduction, Goal:StructuralDeduction)

//     (&&,X,A..+), B, task("!") |- subIfUnifiesAny((&&,A..+),X,B), (Goal:Strong)
//        (&&,(--,%X),A..+), B,  task("!") |- subIfUnifiesAny((&&,A..+),X,B), (Goal:StrongPN)

     //X, (&&,X,A..+),            task("?@") |- (&&,A..+), ()
     //   X, (&&,(--,%X),A..+),   task("?@") |- (&&,A..+), ()
     //B, (A==>B),                task("?@") |- A, ()
     //A, (A==>B),                task("?@") |- B, ()
     //A, ((--,%A)==>B),          task("?@") |- B, ()


     //(&&,X,A..+), X, task("?@") |- (&&,A..+), ()
     //   (&&,(--,%X),A..+), X, task("?@") |- (&&,A..+), ()


     //B, C, belief("&&") |- subIfUnifiesDep(dropAnyEvent(C),X,B), (Belief:AnonymousAnalogy)
                //,Goal:Deduction
                //Goal:Goduction)

///// conjunction decompose
//
//    (&&,A_1..n), A_1 |- A_1, (Truth:StructuralDeduction, Desire:StructuralStrong)
//    (&/,A_1..n), A_1 |- A_1, (Truth:StructuralDeduction, Desire:StructuralStrong)
//    (&|,A_1..n), A_1 |- A_1, (Truth:StructuralDeduction, Desire:StructuralStrong)
//    (&/,B,A_1..n), B, task("!") |- (&/,A_1..n), (Truth:Deduction, Desire:Strong, SequenceIntervals:FromPremises)
//
////// propositional decomposition ////////////////////////////////////////////////////////////////////////////////////
////If S is the case, and (&&,S,A_1..n) is not the case, it can't be that (&&,A_1..n) is the case
//
//    S, (&/,S,A_1..n) |- (&/,A_1..n), (Truth:DecomposePositiveNegativeNegative, SequenceIntervals:FromPremises)
//    S, (&|,S,A_1..n) |- (&|,A_1..n), (Truth:DecomposePositiveNegativeNegative)
//    S, (&&,S,A_1..n) |- (&&,A_1..n), (Truth:DecomposePositiveNegativeNegative)
//    S, (||,S,A_1..n) |- (||,A_1..n), (Truth:DecomposeNegativePositivePositive)
//
////Additional for negation: https://groups.google.com/forum/#!topic/open-nars/g-7r0jjq2Vc
//
//    S, (&/,(--,S),A_1..n) |- (&/,A_1..n), (Truth:DecomposeNegativeNegativeNegative, SequenceIntervals:FromPremises)
//    S, (&|,(--,S),A_1..n) |- (&|,A_1..n), (Truth:DecomposeNegativeNegativeNegative)
//    S, (&&,(--,S),A_1..n) |- (&&,A_1..n), (Truth:DecomposeNegativeNegativeNegative)
//    S, (||,(--,S),A_1..n) |- (||,A_1..n), (Truth:DecomposePositivePositivePositive)

