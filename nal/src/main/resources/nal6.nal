////strong unification
//    (Y ==> X), Z, --is(Z,"==>")     |- subIfUnifiesAny(X,Y,Z), (Belief:Deduction)
//    (Y ==> X), Z, --is(Z,"==>")     |- --subIfUnifiesAny(X,Y,Z), (Belief:DeductionNP)
//    (--Y ==> X), Z, --is(Z,"==>")   |- subIfUnifiesAny(X,Y,Z), (Belief:DeductionPN)
//    (--Y ==> X), Z, --is(Z,"==>")   |- --subIfUnifiesAny(X,Y,Z), (Belief:DeductionNN)
//      (Y ==> X), Z, --is(Z,"==>")     |- subIfUnifiesAny(Y,X,Z), (Belief:Abduction)
//      (Y ==> X), Z, --is(Z,"==>")     |- subIfUnifiesAny(Y,X,Z), (Belief:AbductionNN)
//        (Y ==> X), Z, --is(Z,"==>"), task("?") |- subIfUnifiesAny(Y,X,Z), (Punctuation:Question)
//        (Y ==> X), Z, --is(Z,"==>"), task("?") |- subIfUnifiesAny(X,Y,Z), (Punctuation:Question)
//        (--Y ==> X), Z, --is(Z,"==>"), task("?") |- subIfUnifiesAny(X,Y,Z), (Punctuation:Question)
//

//    (X ==> Y), Z, notImpl(Z)     |- subIfUnifiesAny(X,Y,Z), (Belief:AbductionPB)


// Conditional syllogism && Independent Variable Elimination
//      If after M, P usually happens, and M happens, it means P is expected to happen

    A, (A ==> C), --is(A,"#"),--is(C,"#") |- C, (Belief:Pre, Goal:PreWeak, Time:TaskPlusBeliefDT)
     B, (A ==> C),--is(A,"--"), --is(A,"#"),--is(C,"#"), --is(B,"==>") |- subIfUnifiesAny(C,A,B,strict), (Belief:PreRecursive, Goal:PreWeak, Time:TaskPlusBeliefDT)

        //antigoal:
        //B, (A ==> C), --is(A,"--"),--is(A,"#"),--is(C,"#"), --is(B,"==>") |- --subIfUnifiesAny(C,A,B), (Goal:PreWeakN, Time:TaskPlusBeliefDT)

       //questions
        //B, (A ==> C), task("?"), --is(A,"--"), --is(A,"#"),--is(C,"#"), --is(B,"==>") |- subIfUnifiesAny((A ==> C),A,B,strict), (Punctuation:Question, Time:TaskPlusBeliefDT)
          B, (A ==> C), --is(A,"--"),task("?@"), --is(A,"#"),--is(C,"#"), --is(B,"==>") |- subIfUnifiesAny(C,A,B), (Time:TaskPlusBeliefDT)


    A, (--A ==> C), --is(A,"#"),--is(C,"#") |- C, (Belief:PreN, Goal:PreWeakN, Time:TaskPlusBeliefDT)
     B, (--A ==> C), --is(A,"#"),--is(C,"#"), --is(B,"==>") |- subIfUnifiesAny(C,A,B,strict), (Belief:PreRecursiveN, Goal:PreWeakN, Time:TaskPlusBeliefDT)

        //antigoal:
        //B, (--A ==> C), --is(A,"#"),--is(C,"#"), --is(B,"==>") |- --subIfUnifiesAny(C,A,B), (Goal:PreWeak, Time:TaskPlusBeliefDT)

        //questions
        //B, (--A ==> C), task("?"), --is(A,"#"),--is(C,"#"), --is(B,"==>") |- subIfUnifiesAny((--A ==> C),A,B,strict), (Punctuation:Question, Time:TaskPlusBeliefDT)
          B, (--A ==> C), task("?@"), --is(A,"#"),--is(C,"#"), --is(B,"==>") |- subIfUnifiesAny(C,A,B), (Time:TaskPlusBeliefDT)

    B, (C ==> A), --is(A,"#"),--is(C,"#"), --is(B,"==>") |- subIfUnifiesAny(C,A,B), (Belief:Post, Goal:PostStrong, Time:TaskMinusBeliefDT)

        //antigoal:
        //B, (C ==> A), --is(A,"#"),--is(C,"#"), --is(B,"==>") |- --subIfUnifiesAny(C,A,B), (Goal:PostStrongPN, Time:TaskMinusBeliefDT)

        //questions
        //B, (C ==> A), task("?"), --is(A,"#"),--is(C,"#"), --is(B,"==>") |- subIfUnifiesAny((C ==> A),A,B,strict), (Punctuation:Question, Time:TaskMinusBeliefDT)
          B, (C ==> A), task("?@"), --is(A,"#"),--is(C,"#"), --is(B,"==>") |- subIfUnifiesAny(C,A,B), (Time:TaskMinusBeliefDT)




        B, ((&&,C,A..+) ==> X)         |- subIfUnifiesAny((&&,X,A..+),C,B), (Belief:Pre, Goal:PreWeak)
         B, (X ==> (&&,C,A..+))         |- subIfUnifiesAny((&&,X,A..+),C,B), (Belief:Post, Goal:PostStrong)
          //B, ((&&,C,A..+) ==> X)         |- subIfUnifiesAny((&&,--X,A..+),C,B), (Belief:DeductionPN, Goal:DesirePN)
        B, ((&&,--C,A..+) ==> X)       |- subIfUnifiesAny((&&,X,A..+),C,B), (Belief:PreN, Goal:PreWeakN)
         B, (X ==> (&&,--C,A..+))       |- subIfUnifiesAny((&&,X,A..+),C,B), (Belief:PostN, Goal:PostStrongN)
          //B, ((&&,--C,A..+) ==> X)       |- subIfUnifiesAny((&&,--X,A..+),C,B), (Belief:DeductionNN, Goal:DesireNN)
            B, (--(&&,C,A..+) ==> X)   |- subIfUnifiesAny(--(&&,X,A..+),C,B), (Belief:Pre, Goal:PreWeak)
             B, (X ==> (&&,C,A..+))   |- subIfUnifiesAny(--(&&,X,A..+),C,B), (Belief:PostPN, Goal:PostStrongPN)
              //B, (--(&&,C,A..+) ==> X)   |- subIfUnifiesAny(--(&&,--X,A..+),C,B), (Belief:DeductionPN, Goal:DesirePN)
            B, (--(&&,--C,A..+) ==> X) |- subIfUnifiesAny(--(&&,X,A..+),C,B), (Belief:PreN, Goal:PreWeakN)
             B, (X ==> (&&,--C,A..+)) |- subIfUnifiesAny(--(&&,X,A..+),C,B), (Belief:PostNN, Goal:PostStrongNN)
              //B, (--(&&,--C,A..+) ==> X) |- subIfUnifiesAny(--(&&,--X,A..+),C,B), (Belief:DeductionNN, Goal:DesireNN)



//            B, ((&&,C,A..+) ==> X), neq(B,C) |- subIfUnifiesAny(((&&,A..+) ==> X),C,B), (Belief:Deduction)
//            B, ((&&,--C,A..+) ==> X), neq(B,C) |- subIfUnifiesAny(((&&,A..+) ==> X),C,B), (Belief:DeductionN)
//                B, (--(&&,C,A..+) ==> X), neq(B,C), notImpl(B) |- (--,subIfUnifiesAny(((&&,A..+) ==> X),C,B)), (Belief:Deduction)
//                B, (--(&&,--C,A..+) ==> X), neq(B,C), notImpl(B) |- (--,subIfUnifiesAny(((&&,A..+) ==> X),C,B)), (Belief:DeductionN)

            //(Y --> P), ((&&,(X-->P),A..+) ==> Z),neq(X,Y) |- subIfUnifiesAny(((&&,(X-->P),A..+) ==> Z), X,Y,strict), (Belief:Deduction)
              //  (Y --> P), ((&&,--(X-->P),A..+) ==> Z),neq(X,Y) |- subIfUnifiesAny(((&&,--(X-->P),A..+) ==> Z), X,Y,strict), (Belief:DeductionN)
            //(Y --> P), (Z ==> (&&,(X-->P),A..+)),neq(X,Y) |- subIfUnifiesAny((Z ==> (&&,(X-->P),A..+)), X,Y,strict), (Belief:Deduction)
              //  (Y --> P), (Z ==> (&&,--(X-->P),A..+)),neq(X,Y) |- subIfUnifiesAny((Z ==> (&&,--(X-->P),A..+)), X,Y,strict), (Belief:DeductionN)

//        //TODO question variations
        Y, ((&&,X,A..+) ==> Z), neq(X,Y) |- subIfUnifiesAny(((&&,X,A..+) ==> Z), X,Y,strict), (Belief:Deduction)
         //Y, ((&&,X,A..+) ==> Z) |- subIfUnifiesAny(((&&,X,Y,A..+) ==> Z), X,Y), (Belief:Deduction)
        Y, ((&&,--X,A..+) ==> Z), neq(X,Y) |- subIfUnifiesAny(((&&,--X,A..+) ==> Z), X,Y,strict), (Belief:DeductionN)
         //Y, ((&&,--X,A..+) ==> Z) |- subIfUnifiesAny(((&&,--X,--Y,A..+) ==> Z), X,Y), (Belief:DeductionN)
                Y, (--(&&,X,A..+) ==> Z), neq(X,Y) |- subIfUnifiesAny((--(&&,X,A..+) ==> Z), X,Y,strict), (Belief:Deduction)
                 //Y, (--(&&,X,A..+) ==> Z) |- subIfUnifiesAny((--(&&,X,Y,A..+) ==> Z), X,Y), (Belief:Deduction)
                Y, (--(&&,--X,A..+) ==> Z), neq(X,Y) |- subIfUnifiesAny((--(&&,--X,A..+) ==> Z), X,Y,strict), (Belief:DeductionN)
                 //Y, (--(&&,--X,A..+) ==> Z) |- subIfUnifiesAny((--(&&,--X,--Y,A..+) ==> Z), X,Y), (Belief:DeductionN)
        Y, (Z ==> (&&,X,A..+)), neq(X,Y),neq(Y,Z) |- subIfUnifiesAny((Z ==> (&&,X,A..+)), X,Y,strict), (Belief:Abduction)
         //Y, (Z ==> (&&,X,A..+)) |- subIfUnifiesAny((Z ==> (&&,X,Y,A..+)), X,Y), (Belief:Abduction)
        Y, (Z ==> (&&,--X,A..+)), neq(X,Y),neq(Y,Z) |- subIfUnifiesAny((Z ==> (&&,--X,A..+)), X,Y,strict), (Belief:AbductionN)
         //Y, (Z ==> (&&,--X,A..+)) |- subIfUnifiesAny((Z ==> (&&,--X,--Y,A..+)), X,Y), (Belief:AbductionN)

    Y, (B ==> (&&,X,A..+)) |- subIfUnifiesAny((B ==> (&&,A..+)),X,Y), (Belief:Deduction)
    Y, (B ==> (&&,--X,A..+)) |- subIfUnifiesAny((B ==> (&&,A..+)),X,Y), (Belief:DeductionN)

//    Y, ((&&,X,A..+) ==> B) |- subIfUnifiesAny((X ==> B),X,Y), (Belief:Deduction)
//    Y, ((&&,--X,A..+) ==> B) |- subIfUnifiesAny((--X ==> B),X,Y), (Belief:DeductionN)

        ((&&,M,X,A..*) ==> C), (Y ==> C) |- subIfUnifiesAny((M ==> C),X,Y), (Belief:AbductionPB)
        ((&&,M,A..+) ==> X), ((&&,A..+) ==> Y) |- subIfUnifiesAny((M ==> X),X,Y,"$"), (Belief:AbductionPB)
          (--(&&,M,A..+) ==> X), (--(&&,A..+) ==> Y) |- subIfUnifiesAny((--M ==> X),X,Y,"$"), (Belief:AbductionPB)
        ((&&,M,A..+) ==> X), ((&&,A..+) ==> Y) |- subIfUnifiesAny((M ==> Y),Y,X,"$"), (Belief:AbductionPB)
          (--(&&,M,A..+) ==> X), (--(&&,A..+) ==> Y) |- subIfUnifiesAny((--M ==> Y),Y,X,"$"), (Belief:AbductionPB)


//// implication-based syllogism ////////////////////////////////////////////////////////////////////////////////////
//       (A ==> B) ------- (B ==> C)
//            \               /
//             \             /
//              \           /
//               \         /
//                (A ==> C)

    //"Please note that the temporal order in the conclusion of a weak rule is
    //not necessarily the same as the order in the premises, given the hypothetical
    //nature of such a rule."

    //If after S M happens, and after M then P happens, so S then P happens
    (S ==> M), (M ==> P)   |- (S ==> P), (Belief:Deduction)
     //(M ==> P), (S ==> M)  |- (S ==> P), (Belief:DeductionX)
      //if after S --M happens, and after --M then P happens, so S then P happens
      (S ==> M), (--M ==> P)  |- (S ==> P), (Belief:DeductionN)
       //(--M ==> P), (S ==> M) |- (S ==> P), (Belief:DeductionPNX)

        (S ==> M), (M ==> P), task("?") |- ((S ==> P) || (P ==> S)), (Punctuation:Question)
            //(S ==> M), (M ==> P), task("?") |- (S ==> P), (Punctuation:Question)
            //(S ==> M), (M ==> P), task("?") |- (P ==> S), (Punctuation:Question)

            (S ==> M), (--M ==> P), task("?") |- ((S ==> P) || (P ==> S)), (Punctuation:Question)
                //(S ==> M), (--M ==> P), task("?") |- (S ==> P), (Punctuation:Question)
                //(S ==> M), (--M ==> P), task("?") |- (P ==> S), (Punctuation:Question)

        //deduction with unification
        (S ==> M), (N ==> P), neq(M,N) |- subIfUnifiesAny((S ==> P), M, N), (Belief:Deduction)
            (S ==> M), (--N ==> P), neq(M,N) |- subIfUnifiesAny((S ==> P), M, N), (Belief:DeductionN)


    //TODO reversals for Abduction, Induction, Exemplification

    (M ==> S), (M ==> P) |- (S ==> P), (Belief:Abduction)
        (M ==> S), (M ==> P) |- (--S ==> --P), (Belief:AbductionNN)
    (M ==> P), (M ==> S) |- (S ==> P), (Belief:Induction)
        (M ==> P), (M ==> S) |- (--S ==> --P), (Belief:InductionNN)


                (M ==> S), (M ==> P), task("?") |- (S ==> P), (Punctuation:Question)
                (M ==> S), (M ==> P), task("?") |- (P ==> S), (Punctuation:Question)

    (S ==> M), (P ==> M) |- (S ==> P), (Belief:InductionPB)
    (P ==> M), (S ==> M) |- (S ==> P), (Belief:AbductionPB)

                (S ==> M), (P ==> M), task("?") |- (S ==> P), (Punctuation:Question)
                (S ==> M), (P ==> M), task("?") |- (P ==> S), (Punctuation:Question)

    (P ==> M), (M ==> S) |- (S ==> P), (Belief:Exemplification)
        (P ==> M), (--M ==> S) |- (S ==> P), (Belief:ExemplificationN)
    (M ==> S), (P ==> M)  |- (S ==> P), (Belief:Exemplification)


    //the comparison rules here emulates what Comparison did in generating <=> which are modeled here as a pair of opposing ==>
    //untested
//    (P ==> M), (S ==> M) |- --((S ==> P) && (P ==> S)), (Belief:ComparisonSymmetric)
//    (M ==> P), (M ==> S) |- --((S ==> P) && (P ==> S)), (Belief:ComparisonSymmetric)
////    (P ==> M), (S ==> M) |- (S ==> P), (Belief:Comparison)
////        (P ==> M), (S ==> M) |- (P ==> S), (Belief:Comparison)
////    (M ==> P), (M ==> S) |- (S ==> P), (Belief:Comparison)
////        (M ==> P), (M ==> S) |- (P ==> S), (Belief:Comparison)

// Contraposition (structural)
//    a→b == ¬b→¬a		# contra positition [Lex contrapositionis]
// "If not smoking causes health, being not healthy may be the result of smoking"
// "If smoking causes not health, being healthy may be the result of not smoking"

    (--S ==> P), P |- (--P ==> --S), (Belief:Contraposition)







//// implication-based composition ////////////////////////////////////////////////////////////////////////////////////
//note: the question variations of these are responsible for creating terms that can be truthed dynamically. so they are important

    //Same as for inheritance
    //union/intersection assymmetry: union if subj, intersect if pred

     (P ==> M), (S ==> M) |- ((P && S) ==> M), (Belief:Intersection)
       (P ==> M), (S ==> M) |- --((P && S) ==> M), (Belief:IntersectionNN)
     (P ==> M), (S ==> M) |- ((P || S) ==> M), (Belief:Union)
        (P ==> M), (S ==> M) |- --((P || S) ==> M), (Belief:UnionNN)
//     (P ==> M), (S ==> M) |- ((P && S) ==> M), (Belief:IntersectionSym)
//     (P ==> M), (S ==> M) |- ((P || S) ==> M), (Belief:UnionSym)
        (P ==> M), (S ==> M), task("?") |- ((P && S) ==> M), (Punctuation:Question)
        (P ==> M), (S ==> M), task("?") |- ((P || S) ==> M), (Punctuation:Question)

                //...Also:VarIntro)


     (M ==> P), (M ==> S) |- (M ==> (polarize(P,task) && polarize(S,belief))), (Belief:IntersectionDepolarized)
        (M ==> P), (M ==> S), task("?") |- (M ==> (polarize(P,task) && polarize(S,belief))), (Punctuation:Question)
     (M ==> P), (M ==> S) |- (M ==> (polarize(P,task) || polarize(S,belief))), (Belief:UnionDepolarized)
        (M ==> P), (M ==> S), task("?") |- (M ==> (polarize(P,task) || polarize(S,belief))), (Punctuation:Question)

        //TODO question variations
        //((&&,P,A..+) ==> X), ((&&,S,A..+) ==> X), neq(P,S) |- ((&&,(P && S),A..+) ==> X), (Belief:IntersectionSym)
        //((&&,P,A..+) ==> X), ((&&,S,A..+) ==> X), neq(P,S) |- ((&&,(P || S),A..+) ==> X), (Belief:UnionSym)

        //TODO question variations
        //(--(&&,P,A..+) ==> X), (--(&&,S,A..+) ==> X), neq(P,S) |- (--(&&,(P && S),A..+) ==> X), (Belief:IntersectionSym)
        //(--(&&,P,A..+) ==> X), (--(&&,S,A..+) ==> X), neq(P,S) |- (--(&&,(P || S),A..+) ==> X), (Belief:UnionSym)


    //Contradiction Neutralize
    ((&&,Y,A..+) ==> X), ((&&,Z,A..+) ==> X), eqNeg(Y,Z), --is(X,"#")     |- ((&&,A..+) ==> X), (Belief:Intersection)
      ((&&,Y,A..+) ==> X), ((&&,Z,A..+) ==> X), eqNeg(Y,Z), --is(X,"#")     |- --((&&,A..+) ==> X), (Belief:IntersectionNN)
    (--(&&,Y,A..+) ==> X), (--(&&,Z,A..+) ==> X), eqNeg(Y,Z), --is(X,"#") |- (--(&&,A..+) ==> X), (Belief:Intersection)
      (--(&&,Y,A..+) ==> X), (--(&&,Z,A..+) ==> X), eqNeg(Y,Z), --is(X,"#") |- --(--(&&,A..+) ==> X), (Belief:IntersectionNN)
    (X ==> (&&,Y,A..+)), (X ==> (&&,Z,A..+)), eqNeg(Y,Z), --is(X,"#")     |- (X ==> (&&,A..+)), (Belief:Intersection)
        (X ==> (&&,Y,A..+)), (X ==> (&&,Z,A..+)), eqNeg(Y,Z), --is(X,"#")     |- --(X ==> (&&,A..+)), (Belief:IntersectionNN)
      (Y ==> X), (Z ==> X), eqNeg(Y,Z), --is(X,"#")                       |- (#1 ==> X), (Belief:Intersection)
          (Y ==> X), (Z ==> X), eqNeg(Y,Z), --is(X,"#")                       |- --(#1 ==> X), (Belief:IntersectionNN)



//    (X ==> C), M, eventOf(X,M)    |- (conjWithout(X,M) ==> C), (Belief:Deduction)
//      (--X ==> C), M, eventOf(X,M)    |- (--conjWithout(X,M) ==> C), (Belief:Deduction)
//    (X ==> C), M, eventOfNeg(X,M) |- (conjWithout(X,--M) ==> C), (Belief:DeductionPN)
//      (--X ==> C), M, eventOfNeg(X,M) |- (--conjWithout(X,--M) ==> C), (Belief:DeductionPN)



    (X ==> Y), ((&&,Y,A..+) ==> Z) |- ((&&,X,A..+) ==> Z), (Belief:Deduction)
        (X ==> Y), ((&&,Y,A..+) ==> Z) |- --((&&,X,A..+) ==> Z), (Belief:DeductionPN)
    (X ==> Y), ((&&,--Y,A..+) ==> Z) |- ((&&,X,A..+) ==> Z), (Belief:DeductionN)
        (X ==> Y), ((&&,--Y,A..+) ==> Z) |- --((&&,X,A..+) ==> Z), (Belief:DeductionNN)

    ((&&,X,A..+) ==> Z), ((&&,Y,A..+) ==> Z) |- (Y ==> X), (Belief:InductionPB)
      (--(&&,X,A..+) ==> Z), (--(&&,Y,A..+) ==> Z) |- (Y ==> X), (Belief:InductionPB)

    //Conditional Abduction via Multi-conditional Syllogism
    (C ==> Y), (E ==> Y), eventsOf(C,E)          |-    conjWithoutAll(C,E), (Belief:AbductionPB)
        (--C ==> Y), (D ==> Y), eventsOf(C,D)    |-  --conjWithoutAll(C,D), (Belief:AbductionPB)

    //Conj/Impl Chain Deduction (with swap)
    //TODO use conj ops
    ((&&,X,A..+) ==> Z), (Y ==> X)  |- ((&&,Y,A..+) ==> Z), (Belief:Deduction)
     (Y ==> X), ((&&,X,A..+) ==> Z)   |- ((&&,Y,A..+) ==> Z), (Belief:Deduction)
        ((&&,--X,A..+) ==> Z), (Y ==> X)  |- ((&&,Y,A..+) ==> Z), (Belief:DeductionPN)
         (Y ==> X), ((&&,--X,A..+) ==> Z)  |- ((&&,Y,A..+) ==> Z), (Belief:DeductionN)




    (C ==> Z), (B ==> M), eventOf(C,B) |- ((conjWithout(C,B) && M) ==> Z), (Belief:Induction)
        (C ==> Z), (B ==> M), eventOf(C,B) |- ((conjWithout(C,B) && --M) ==> Z), (Belief:InductionPN)


  (&&,(X<->Y),A..+), (X<->Y)         |- substitute((&&,A..+),X,Y,strict), (Belief:StructuralDeduction, Goal:StructuralDeduction)
  //chain:
  (&&,(X<->Y),A..+), (Y<->Z)         |- substitute((&&,A..+),X,Z,strict), (Belief:Analogy, Goal:Analogy)
  (&&,(X<->Y),(Y<->Z),A..+), (X<->Y) |- substitute(substitute((&&,A..+),X,Z,strict),Y,Z,strict), (Belief:StructuralDeduction, Goal:StructuralDeduction)


// Mutex induction
    (&&,X,--Y,A..*), (&&,Y,--X,A..*),neq(X,Y)              |- (&&,--(X && Y),A..*), (Belief:Intersection)
    ((&&,X,--Y,A..+)==>Z), ((&&,Y,--X,A..+)==>Z),neq(X,Y)  |- ((&&,--(X && Y),A..+) ==> Z), (Belief:Intersection)
      (&&,X,--Y,A..*), (&&,Y,--X,A..*),neq(X,Y)             |-  --(X ==> Y), (Belief:Induction)
      (&&,X,--Y,A..+), (&&,Y,--X,B..+),neq(X,Y)              |- (&&,--((&&,A..+) && (&&,B..+))), (Belief:Intersection)
        //TODO impl predicate mutex

//mutex soft-swap
    Z, (&&,X,Y), in(Z,X)            |- (Z <-> substitute(Z,X,--Y,strict)), (Belief:BeliefStructuralAbductionPN)
    Z, (&&,X,Y), in(Z,--X)          |- (Z <-> substitute(Z,--X,Y,strict)), (Belief:BeliefStructuralAbductionPN)

//mutex swap
//    Z, (&&,X,Y), in(Z,X)            |- substitute(Z,X,--Y,strict), (Belief:AnalogyPN, Goal:AnalogyPN)
//    Z, (&&,X,Y), in(Z,--X)          |- substitute(Z,--X,Y,strict), (Belief:AnalogyPN, Goal:AnalogyPN)

//internal mutex chain:
  (&&,--(X && Y),X,A..+), X, neq(X,Y)          |- (&&,--Y,A..+), (Belief:StructuralDeduction, Goal:StructuralDeduction)









//// multi-conditional syllogism ////////////////////////////////////////////////////////////////////////////////////
//Inference about the pre/postconditions

//    ((&&,M,A_1..n) ==> C), M, not_implication_or_equivalence(M) |- ((&&,A_1..n) ==> C), (Truth:Deduction, Order:ForAllSame)
//    ((&&,M,A_1..n) ==> C), ((&&,A_1..n) ==> C) |- M, (Truth:Abduction, Order:ForAllSame)

//conditional deduction/abduction
//   original:   ((&&,M,A_1..n) ==> C), M, not_implication_or_equivalence(M) |- ((&&,A_1..n) ==> C), (Truth:Deduction, Order:ForAllSame)
//   original:   ((&&,M,A_1..n) ==> C), (A ==> M) |- ((&&,A,A_1..n) ==> C), (Truth:Deduction, Order:ForAllSame)
//   original:   ((&&,M,A_1..n) ==> C), ((&&,A_1..n) ==> C) |- M, (Truth:Abduction, Order:ForAllSame)
//   original:   ((&&,A,A_1..n) ==> C), (A ==> M) |- ((&&,M,A_1..n) ==> C), (Truth:Abduction, Order:ForAllSame)
//   original:   ((&&,A_1..n) =\> C), M, not_implication_or_equivalence(M) |- ((&&,M,A_1..n) =\> C), (Truth:Induction)
//   original:   ((&&,M,A_1..n) ==> C), ((&&,A,A_1..n) ==> C) |- (A ==> M), (Truth:Induction, Order:ForAllSame)

        //((&&,M,A..+) ==> C), M,                  |- ((&&,A..+) ==> C), (Belief:Deduction)

    //(X ==> C), (B ==> M), eventOf(X,M) |- ((conjWithout(X,M) && B) ==> C), (Belief:Deduction)
    //(X ==> C), (B ==> M), eventOfNeg(X,M) |- ((conjWithout(X,--M) && B) ==> C), (Belief:DeductionPN)
        //((&&,M,A..+) ==> C), (B ==> M), neq(B,M) |- ((&&,B,A..+) ==> C), (Belief:Deduction)

                //((&&,M,A..+) ==> Y), ((&&,A..+) ==> Y)          |- M, (Belief:AbductionPB)
                //((&&,M,A) ==> Y),    (A ==> Y)                  |- M, (Belief:AbductionPB)
                    //(--(&&,M,A..+) ==> Y), (--(&&,A..+) ==> Y)  |- M, (Belief:AbductionPB)
                    //(--(&&,M,A) ==> Y),    (--A ==> Y)          |- M, (Belief:AbductionPB)

            //(C ==> (&&,X,A..+)), (C ==> (&&,Y,A..+))   |- (X ==> Y), (Belief:Abduction)
            //(C ==> (&&,X,A..+)), (C ==> (&&,Y,A..+))   |- (Y ==> X), (Belief:Abduction)

        //    ((&&,X,A..+) ==> C), ((&&,Y,A..+) ==> C)   |- (X ==> Y), (Belief:Induction)
        //    ((&&,X,A..+) ==> C), ((&&,Y,A..+) ==> C)   |- (Y ==> X), (Belief:Induction)
        //        (--(&&,X,A..+) ==> C), (--(&&,Y,A..+) ==> C)   |- (X ==> Y), (Belief:Induction)
        //        (--(&&,X,A..+) ==> C), (--(&&,Y,A..+) ==> C)   |- (Y ==> X), (Belief:Induction)
        //        //(--(&&,X,A..+) ==> C), ((&&,Y,A..+) ==> C)  ???
        //        //(--(&&,X,A..+) ==> C), ((&&,Y,A..+) ==> C)  ???







    //Conjunction Anti-Contradiction: ((X&&A)==>C) and ((--X&&A)==>C)  |-  (A==>C), since X or --X doesnt make a difference
    ((&&,X,A..+) ==> C), (D ==> C), eventOfNeg(D,X)  |- ((&&,A..+) ==> C), (Belief:InductionPB)
        (--(&&,X,A..+) ==> C), (--D ==> C), eventOfNeg(D,X)  |- ((--,(&&,A..+)) ==> C), (Belief:InductionPB)
    (C ==> (&&,X,A..+)), (C ==> D), eventOfNeg(D,X)  |- (C ==> (&&,A..+)), (Belief:AbductionPB)

//precondition/post-condition combiner inference rule (variable_unification6):




//        <patham9>
//      this rule says:
//        if two different precondition conjunctions, with a common element lead to the same conclusion,
//        it might be that these different preconditions in the specific conjunctions imply each other
//        because the premises can be swapped for this rule and it is still valid
    (A ==> X), (B ==> X), neq(A,B), eventCommon(A,B) |- (conjWithoutAll(A,B) ==> conjWithoutAll(B,A)), (Belief:InductionPB)
    (A ==> X), (B ==> X), neq(A,B), eventCommon(A,B) |- (conjWithoutAll(B,A) ==> conjWithoutAll(A,B)), (Belief:InductionPB)

        //((&&,X,A..+) ==> C), ((&&,Y,A..+) ==> C)   |- ((X ==> Y) && (Y ==> X)), (Bel4ief:InductionPB)

    ((--,A) ==> X), (B ==> X), neq(A,B), eventCommon(A,B) |- ((--,conjWithoutAll(A,B)) ==> conjWithoutAll(B,A)), (Belief:InductionPB)
    ((--,A) ==> X), (B ==> X), neq(A,B), eventCommon(A,B) |- ((--,conjWithoutAll(B,A)) ==> conjWithoutAll(A,B)), (Belief:InductionPB)


    (X ==> A), (X ==> B), neq(A,B), eventCommon(A,B) |- (conjWithoutAll(A,B) ==> conjWithoutAll(B,A)), (Belief:AbductionPB)
    (X ==> A), (X ==> B), neq(A,B), eventCommon(A,B) |- (conjWithoutAll(B,A) ==> conjWithoutAll(A,B)), (Belief:AbductionPB)

        (X ==> A), (X ==> B), neq(A,B), eventCommon(A,B) |- (--conjWithoutAll(A,B) ==> conjWithoutAll(B,A)), (Belief:AbductionPBN)
        (X ==> A), (X ==> B), neq(A,B), eventCommon(A,B) |- (--conjWithoutAll(B,A) ==> conjWithoutAll(A,B)), (Belief:AbductionPBN)


// conditional deduction "An inverse inference has been implemented as a form of deduction" https://code.google.com/p/open-nars/issues/detail?id=40&can=1

//    (U --> L), ((&&,(#X --> L),(#X --> R),A..*) ==> Z), neq(U,R) |- substitute((((&&,A..*) && (U --> R)) ==> Z),#X,U), (Belief:Deduction)
//        (U --> L), ((&&,--(#X --> L),(#X --> R),A..*) ==> Z), neq(U,R) |- substitute((((&&,A..*) && (U --> R)) ==> Z),#X,U), (Belief:DeductionN)






//// conjunction decompose AND dependent variable elimination - decomposition with elimination of a variable

        //, Goal:StructuralStrong
           //maybe subOf?
        //C, X, eventOfPosOrNeg(C,X)  |- conjWithoutPosOrNeg(C,X), (Belief:StructuralDeduction, Goal:StructuralStrong)
        //C, X, task("!"), eventOfPosOrNeg(C,X)  |- conjWithoutPosOrNeg(C,X), (Punctuation:Quest)










//Anonymous Analogy (NAL5)
    //originally this only unified depvar (dep var elimination)
    (&&,X,A..+), Y   |- subIfUnifiesAny((&&,A..+),X,Y,"#",strict), (Belief:AnonymousAnalogy, Goal:AnonymousAnalogy)
      //accelerated version requiring no second-level unification and allows the general case subIfUnifiesAny to be 'strict'
      //C, X, eventOf(C,X)    |- conjWithout(C,X), (Belief:AnonymousAnalogy)
    (&&,--X,A..+), Y   |- subIfUnifiesAny((&&,A..+),X,Y,"#",strict), (Belief:AnonymousAnalogyPN, Goal:AnonymousAnalogyPN)
      //accelerated version requiring no second-level unification and allows the general case subIfUnifiesAny to be 'strict'
      //C, X, eventOfNeg(C,X) |- conjWithout(C,--X), (Belief:AnonymousAnalogyPN)

//    Y, (&&,X,A..+)                  |- subIfUnifiesAny((&&,  X,A..+),X,Y,"#",strict), (Belief:Deduction)
//    Y, (&&,--X,A..+)                |- subIfUnifiesAny((&&,--X,A..+),X,Y,"#",strict), (Belief:DeductionN)
//        Y, (&&,X,A..+), task("?")       |- subIfUnifiesAny((&&,  X,A..+),X,Y,"#",strict), (Punctuation:Question)
//        Y, (&&,--X,A..+), task("?")     |- subIfUnifiesAny((&&,--X,A..+),X,Y,"#",strict), (Punctuation:Question)
//        Y, (&&,X,A..+), task("@")       |- subIfUnifiesAny((&&,  X,A..+),X,Y,"#",strict), (Punctuation:Quest)
//        Y, (&&,--X,A..+), task("@")     |- subIfUnifiesAny((&&,--X,A..+),X,Y,"#",strict), (Punctuation:Quest)

//Anonymous Deduction and Abduction
    (V ==> X), X, is(V,"#"), --is(X,"#")      |- X, (Belief:StructuralReduction)
    (--V ==> X), X, is(V,"#"), --is(X,"#")    |- X, (Belief:StructuralReduction)
    (X ==> V), X, is(V,"#"), --is(X,"#")      |- X,   (Belief:StructuralAbduction)
    (--X ==> V), X, is(V,"#"), --is(X,"#")    |- --X, (Belief:StructuralAbduction)



     //((&&,X,A..+) && Z), Z |- (X && Z), (Belief:StructuralDeduction, Goal:StructuralDeduction)
     //(Z && (&&,X,A..+)), Z |- (Z && X), (Belief:StructuralDeduction, Goal:StructuralDeduction)
        //((&&,X,A..+) && (--,%Z)), Z |- (X && (--,%Z)), (Belief:StructuralDeduction, Goal:StructuralDeduction)
        //((--,%Z) && (&&,X,A..+)), Z |- ((--,%Z) && X), (Belief:StructuralDeduction, Goal:StructuralDeduction)

//     (&&,X,A..+), B, task("!") |- subIfUnifiesAny((&&,A..+),X,B), (Goal:Desire)
//        (&&,(--,%X),A..+), B,  task("!") |- subIfUnifiesAny((&&,A..+),X,B), (Goal:DesirePN)

     //X, (&&,X,A..+),            task("?@") |- (&&,A..+), ()
     //   X, (&&,(--,%X),A..+),   task("?@") |- (&&,A..+), ()
     //B, (A==>B),                task("?@") |- A, ()
     //A, (A==>B),                task("?@") |- B, ()
     //A, ((--,%A)==>B),          task("?@") |- B, ()


     //(&&,X,A..+), X, task("?@") |- (&&,A..+), ()
     //   (&&,(--,%X),A..+), X, task("?@") |- (&&,A..+), ()


     //B, C, belief("&&") |- subIfUnifiesDep(dropAnyEvent(C),X,B), (Belief:AnonymousAnalogy)
                //,Goal:Deduction
                //Goal:Goduction)

///// conjunction decompose
//
//    (&&,A_1..n), A_1 |- A_1, (Truth:StructuralDeduction, Desire:StructuralStrong)
//    (&/,A_1..n), A_1 |- A_1, (Truth:StructuralDeduction, Desire:StructuralStrong)
//    (&|,A_1..n), A_1 |- A_1, (Truth:StructuralDeduction, Desire:StructuralStrong)
//    (&/,B,A_1..n), B, task("!") |- (&/,A_1..n), (Truth:Deduction, Desire:Strong, SequenceIntervals:FromPremises)
//
////// propositional decomposition ////////////////////////////////////////////////////////////////////////////////////
////If S is the case, and (&&,S,A_1..n) is not the case, it can't be that (&&,A_1..n) is the case
//
//    S, (&/,S,A_1..n) |- (&/,A_1..n), (Truth:DecomposePositiveNegativeNegative, SequenceIntervals:FromPremises)
//    S, (&|,S,A_1..n) |- (&|,A_1..n), (Truth:DecomposePositiveNegativeNegative)
//    S, (&&,S,A_1..n) |- (&&,A_1..n), (Truth:DecomposePositiveNegativeNegative)
//    S, (||,S,A_1..n) |- (||,A_1..n), (Truth:DecomposeNegativePositivePositive)
//
////Additional for negation: https://groups.google.com/forum/#!topic/open-nars/g-7r0jjq2Vc
//
//    S, (&/,(--,S),A_1..n) |- (&/,A_1..n), (Truth:DecomposeNegativeNegativeNegative, SequenceIntervals:FromPremises)
//    S, (&|,(--,S),A_1..n) |- (&|,A_1..n), (Truth:DecomposeNegativeNegativeNegative)
//    S, (&&,(--,S),A_1..n) |- (&&,A_1..n), (Truth:DecomposeNegativeNegativeNegative)
//    S, (||,(--,S),A_1..n) |- (||,A_1..n), (Truth:DecomposePositivePositivePositive)

