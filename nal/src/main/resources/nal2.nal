//Set Definition Similarity to Inheritance
    ({S} <-> {P}), {S} |- ({S} --> {P}), (Belief:Identity)
    ([S] <-> [P]), [S] |- ([S] --> [P]), (Belief:Identity)

//Set Definition Unwrap
    ({S} <-> {P}), {S} |- (S <-> P), (Belief:Identity)
    ([S] <-> [P]), [S] |- (S <-> P), (Belief:Identity)

//Nothing is more specific than a instance, so its similar
    (S --> {P}),  {P}  |- (S <-> {P}), (Belief:Identity)

//nothing is more general than a property, so its similar
    ([S] --> P),  [S]  |- ([S] <-> P), (Belief:Identity)


//Set Composition

    (C --> A), (C --> B), neq(A,B),is(A,"{"),is(B,"{") |- (C --> union(A,B)), (Belief:Union)
    (C --> A), (C --> B), neq(A,B),is(A,"{"),is(B,"{") |- (C --> intersect(A,B)), (Belief:Intersection)
    (C --> A), (C --> B), neq(A,B),is(A,"{"),is(B,"{") |- (C --> differ(A,B)), (Belief:Difference)

    (C --> A), (C --> B), neq(A,B),is(A,"["),is(B,"[") |- (C --> union(A,B)), (Belief:Intersection)
    (C --> A), (C --> B), neq(A,B),is(A,"["),is(B,"[") |- (C --> intersect(A,B)), (Belief:Union)
    (C --> A), (C --> B), neq(A,B),is(A,"["),is(B,"[") |- (C --> differ(A,B)), (Belief:Difference)

    (A --> C), (B --> C), neq(A,B),is(A,"{"),is(B,"{") |- (intersect(A,B) --> C), (Belief:Union)
    (A --> C), (B --> C), neq(A,B),is(A,"{"),is(B,"{") |- (union(A,B) --> C), (Belief:Intersection)
    (A --> C), (B --> C), neq(A,B),is(A,"{"),is(B,"{") |- (differ(A,B) --> C), (Belief:Difference)

    (A --> C), (B --> C), neq(A,B),is(A,"["),is(B,"[") |- (union(A,B) --> C), (Belief:Union)
    (A --> C), (B --> C), neq(A,B),is(A,"["),is(B,"[") |- (intersect(A,B) --> C), (Belief:Intersection)
    (A --> C), (B --> C), neq(A,B),is(A,"["),is(B,"[") |- (differ(A,B) --> C), (Belief:Difference)

//Set Goals
    (A --> C), (B --> C), task("!"), neq(A,B),is(A,"{"),is(B,"{") |- (intersect(A,B) --> C), (Goal:Weak)
    (A --> C), (B --> C), task("!"), neq(A,B),is(A,"["),is(B,"[") |- (union(A,B) --> C), (Goal:Weak)
    //TODO more
        //(A --> C), (B --> C), task("!"), neq(A,B),is(A,"+"),is(B,"+") |- (intersect(A,B) --> C), (Goal:Induction)
        //(A --> C), (B --> C), task("!"), neq(A,B),is(A,"+"),is(B,"+") |- (union(A,B) --> C), (Goal:Induction)

//Set Decomposition

    (C --> X), Y, is(X,"{"),subPosOrNeg(X,Y),subsMin(X,2) |- (C --> without(X,Y)), (Belief:StructuralDeduction, Goal:StructuralDeduction)
    (C --> X), Y, is(X,"["),subPosOrNeg(X,Y),subsMin(X,2) |- (C --> without(X,Y)), (Belief:StructuralDeduction, Goal:StructuralDeduction)
    (X --> C), Y, is(X,"{"),subPosOrNeg(X,Y),subsMin(X,2) |- (without(X,Y) --> C), (Belief:StructuralDeduction, Goal:StructuralDeduction)
    (X --> C), Y, is(X,"["),subPosOrNeg(X,Y),subsMin(X,2) |- (without(X,Y) --> C), (Belief:StructuralDeduction, Goal:StructuralDeduction)

//Set-in-Conjunction Decomposition
    //TODO

//Set Un-recurser
    ({ (V-->K), A..* }-->M), M |- ({V} --> (M,K)), (Belief:StructuralDeduction, Goal:StructuralDeduction)


