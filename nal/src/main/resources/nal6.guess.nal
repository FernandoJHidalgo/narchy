//NAL6---------------

    Z, (X==>Y), task("?"), neq(Y,Z) |- subIfUnifiesAny((X ==>+- Z), Y, Z, "$", strict), (Belief:BeliefStructuralReduction, Punctuation:Belief)

//Conj and Disj Question Decomposition
    C, X, eventOfPosOrNeg(C,X), task("?") |- conjWithoutPosOrNeg(C,X),  (Punctuation:Question)
        X, C, eventOfPosOrNeg(C,X), task("?") |- conjWithoutPosOrNeg(C,X),  (Punctuation:Question)
    C, X, eventOfPosOrNeg(C,X), task("@") |- conjWithoutPosOrNeg(C,X),  (Punctuation:Quest)
        X, C, eventOfPosOrNeg(C,X), task("@") |- conjWithoutPosOrNeg(C,X),  (Punctuation:Quest)

    (C ==> X), X, task("?"), is(C,"&&")   |- (dropAnyEvent(C) ==> X), (Punctuation:Question)
    (X ==> C), X, task("?"), is(C,"&&")   |- (X ==> dropAnyEvent(C)), (Punctuation:Question)
    (--C ==> X), X, task("?"), is(C,"&&") |- (dropAnyEvent(--C) ==> X), (Punctuation:Question)


//question/quest propagation
    Z, (X==>Y), task("?") |- subIfUnifiesAny(X,Y,Z), (Punctuation:Question)
    Z, (X==>Y), task("@") |- X, (Punctuation:Quest)
        //Z, (X==>Y), task("@") |- subIfUnifiesAny(X,Y,Z), (Punctuation:Quest)
        //Z, (X==>Y), neq(Y,Z), task("?") |- subIfUnifiesAny((X ==>+- Y),Y,Z,strict), (Punctuation:Question)
    Z, (Y==>X), task("?") |- subIfUnifiesAny(X,Y,Z), (Punctuation:Question)
    Z, (Y==>X), task("@") |- X, (Punctuation:Quest)
        //Z, (Y==>X), task("@") |- subIfUnifiesAny(X,Y,Z), (Punctuation:Quest)
        //Z, (Y==>X), neq(Y,Z), task("?") |- subIfUnifiesAny((Y ==>+- X),Y,Z,strict), (Punctuation:Question)
    Z, (--Y==>X), task("?") |- subIfUnifiesAny(X,Y,Z), (Punctuation:Question)
    Z, (--Y==>X), task("@") |- X, (Punctuation:Quest)
        //Z, (--Y==>X), task("@") |- subIfUnifiesAny(X,Y,Z), (Punctuation:Quest)
        //Z, (Y==>X), neq(Y,Z), task("?") |- subIfUnifiesAny((--Y ==>+- X),Y,Z,strict), (Punctuation:Question)

//If S can stand for P, P can to a certain low degree also represent the class S
//If after S usually P happens, then it might be a good guess that usually before P happens, S happens.

    (P ==> S),   (S ==> P),  task("?") |-   (P ==>+- S),   (Belief:Conversion, Punctuation:Belief)
    (P ==> S),   (S ==> P),  task("?") |- (--P ==>+- S),   (Belief:ConversionPN, Punctuation:Belief)
    (P ==> S), (--S ==> P),  task("?") |-   (P ==>+- --S), (Belief:Conversion, Punctuation:Belief)
    (P ==> S), (--S ==> P),  task("?") |- (--P ==>+- --S), (Belief:ConversionPN, Punctuation:Belief)

    (--P ==> S),   (S ==> P),  task("?") |-   (P ==>+- --S), (Belief:Conversion, Punctuation:Belief)
    (--P ==> S),   (S ==> P),  task("?") |- (--P ==>+- --S), (Belief:ConversionPN, Punctuation:Belief)
    (--P ==> S), (--S ==> P),  task("?") |-   (P ==>+- S),   (Belief:Conversion, Punctuation:Belief)
    (--P ==> S), (--S ==> P),  task("?") |- (--P ==>+- S),   (Belief:ConversionPN, Punctuation:Belief)


//implication to similarity (equivalence emulation)
//    (P ==> S), (S ==> P), task(".")   |-   (S <-> P),  (Punctuation:Question)
//    (P ==> S), (--S ==> P), task(".") |- (--S <-> P),  (Punctuation:Question)

    //all these are probably wrong:
        //(--P ==> S), (S ==> P),  task("?") |- (--P ==>+- --S), (Belief:ConversionPN, Punctuation:Belief)
        //(P ==> S), (--S ==> P),  task("?") |- (P ==>+- --S), (Belief:Conversion, Punctuation:Belief)
        //(P ==> S), (S ==> P),        task("?") |- ((--,%P) ==>+- S), (Belief:ConversionPN, Punctuation:Belief)
        //(P ==> S), ((--,%S) ==> P),  task("?") |- (--,((--,%P) ==>+- S)), (Belief:ConversionPN, Punctuation:Belief)

//and the backward inference driven forward inference:


//experimental:
    //([A] <-> {B}), (A <-> B), task("?") |- ([A] <-> {B}), (Belief:BeliefIdentity, Punctuation:Belief)
    //({A} <-> [B]), (A <-> B), task("?") |- ({A} <-> [B]), (Belief:BeliefIdentity, Punctuation:Belief)
    //([A] --> {B}), (A <-> B), task("?") |- ([A] --> {B}), (Belief:BeliefIdentity, Punctuation:Belief)
    //({A} --> [B]), (A <-> B), task("?") |- ({A} --> [B]), (Belief:BeliefIdentity, Punctuation:Belief)


//NAL3:

//TODO these may produce invalid beliefs if the input contains a query variable, this can be filtered before the rule is processed:



//disjunction
   //(&&,--B,A..+), B, task("?") |- (--,((&&,A..+) &&+- --B)), (Belief:BeliefStructuralDeduction, Punctuation:Belief)

////composition on both sides of a statement  TODO - quests handling of these
    //((A..+) --> Z), (X --> Y), task("?") |- ((A..+) --> substitute((A..+),X,Y,strict)), (Belief:BeliefStructuralDeduction, Punctuation:Belief)
        //contains(A..+,X),
    //(Z --> (A..+)), (X --> Y), task("?") |- (substitute((A..+),X,Y,strict) --> (A..+)), (Belief:BeliefStructuralDeduction, Punctuation:Belief)

    //((A..+) <-> Z), (X <-> Y), task("?") |- ((A..+) <-> substitute((A..+),X,Y,strict)), (Belief:BeliefStructuralDeduction, Punctuation:Belief)
        //this one needs reviewed, it might need to be subIfUnified, and other problems

