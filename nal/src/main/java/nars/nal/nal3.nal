//// inheritance composition ////////////////////////////////////////////////////////////////////////////////////
//If P and S are in the intension/extension of M, then union/difference and intersection can be built:
//The duality of extension and intension in NAL corresponds to the
//  duality of intersection and union in set theory â€” intensional intersection
//  corresponds to extensional union, and extensional intersection corresponds
//  to intensional union.

    (P --> M), (S --> M), task("."), notSet(S), notSet(P), neqRCom(S,P) |- ((S | P) --> M), (Belief:Intersection)
    (P --> M), (S --> M), task("."), notSet(S), notSet(P), neqRCom(S,P) |- ((S & P) --> M), (Belief:Union)
    (P --> M), (S --> M), task("."), notSet(S), notSet(P), neqRCom(S,P) |- ((P ~ S) --> M), (Belief:Difference)

    (M --> P), (M --> S), task("."), notSet(S), notSet(P), neqRCom(S,P) |- (M --> (P & S)), (Belief:Intersection)
    (M --> P), (M --> S), task("."), notSet(S), notSet(P), neqRCom(S,P) |- (M --> (P | S)), (Belief:Union)
    (M --> P), (M --> S), task("."), notSet(S), notSet(P), neqRCom(S,P) |- (M --> (P - S)), (Belief:Difference)

//raw product composition
    A, B, task("*"), belief("*") |- (A | B), (Belief:Intersection)
    A, B, task("*"), belief("*") |- (A & B), (Belief:Union)
    A, B, task("*"), belief("*") |- (A ~ B), (Belief:Difference)
//raw product decomposition ?

//// inheritance decomposition ////////////////////////////////////////////////////////////////////////////////////
//if (S --> M) is the case, and ((|,S,A..+) --> M) is not the case, then ((|,A..+) --> M) is not the case, hence Belief:DecomposePositiveNegativeNegative

     (X --> M), ((|,X,A..+) --> M), task(".") |- ((|,A..+) --> M), (Belief:DecomposePositiveNegativeNegative, Goal:DecomposePositiveNegativeNegative)
     (X --> M), ((&,X,A..+) --> M), task(".") |- ((&,A..+) --> M), (Belief:DecomposeNegativePositivePositive, Goal:DecomposeNegativePositivePositive)

     (M --> X), (M --> (&,X,A..+)), task(".") |- (M --> (&,A..+)), (Belief:DecomposePositiveNegativeNegative, Goal:DecomposePositiveNegativeNegative)
     (M --> X), (M --> (|,X,A..+)), task(".") |- (M --> (|,A..+)), (Belief:DecomposeNegativePositivePositive, Goal:DecomposeNegativePositivePositive)

     (S --> M), ((S ~ P) --> M), task(".") |- (P --> M), (Belief:DecomposePositiveNegativePositive, Goal:DecomposePositiveNegativePositive)
     (S --> M), ((P ~ S) --> M), task(".") |- (P --> M), (Belief:DecomposeNegativeNegativeNegative, Goal:DecomposeNegativeNegativeNegative)

     (M --> S), (M --> (S - P)), task(".") |- (M --> P), (Belief:DecomposePositiveNegativePositive, Goal:DecomposePositiveNegativePositive)
     (M --> S), (M --> (P - S)), task(".") |- (M --> P), (Belief:DecomposeNegativeNegativeNegative, Goal:DecomposeNegativeNegativeNegative)


//NAL3 single premise decompose

    ((|,X,A..+) --> M), X |- ((|,A..+) --> M), (Belief:StructuralDeduction, Goal:StructuralDeduction)
    (M --> (&,X,A..+)), X |- (M --> (&,A..+)), (Belief:StructuralDeduction, Goal:StructuralDeduction)

    ((B ~ G) --> S), G, neqRCom(B,S) |- (B --> S), (Belief:StructuralDeduction, Goal:StructuralDeduction)
    (S --> (B - G)), G, neqRCom(B,S) |- (S --> B), (Belief:StructuralDeduction, Goal:StructuralDeduction)


//experiment
//     (M --> (S - P)), (M --> S), task("!") |- (M --> P), (Goal:DecomposePositiveNegativeNegative)
//     (M --> (S - P)), (M --> P), task("!") |- (M --> S), (Goal:DecomposeNegativeNegativeNegative)
