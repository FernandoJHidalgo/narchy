//Set Definition Similarity to Inheritance
    ({S} <-> {P}), {S} |- ({S} --> {P}), (Belief:Identity)
    ([S] <-> [P]), [S] |- ([S] --> [P]), (Belief:Identity)

//Set Definition Unwrap
    ({S} <-> {P}), S |- (S <-> P), (Belief:Identity)
    ([S] <-> [P]), S |- (S <-> P), (Belief:Identity)

//Nothing is more specific than a instance, so its similar
    (S --> {P}),  S  |- (S <-> {P}), (Belief:Identity)

//nothing is more general than a property, so its similar
    ([S] --> P),  P  |- ([S] <-> P), (Belief:Identity)


//Set Composition
//  'setext()' and 'setint()' predicates used here instead of ordinary term pattern matching for efficiency reasons

    (C --> A), (C --> B), neq(A,B),setext(A),setext(B) |- (C --> union(A,B)), (Belief:Union)
    (C --> A), (C --> B), neq(A,B),setext(A),setext(B) |- (C --> intersect(A,B)), (Belief:Intersection)
    (C --> A), (C --> B), neq(A,B),setext(A),setext(B) |- (C --> differ(A,B)), (Belief:Difference)

    (C --> A), (C --> B), neq(A,B),setint(A),setint(B) |- (C --> union(A,B)), (Belief:Intersection)
    (C --> A), (C --> B), neq(A,B),setint(A),setint(B) |- (C --> intersect(A,B)), (Belief:Union)
    (C --> A), (C --> B), neq(A,B),setint(A),setint(B) |- (C --> differ(A,B)), (Belief:Difference)

    (A --> C), (B --> C), neq(A,B),setext(A),setext(B) |- (intersect(A,B) --> C), (Belief:Union)
    (A --> C), (B --> C), neq(A,B),setext(A),setext(B) |- (union(A,B) --> C), (Belief:Intersection)
    (A --> C), (B --> C), neq(A,B),setext(A),setext(B) |- (differ(A,B) --> C), (Belief:Difference)

    (A --> C), (B --> C), neq(A,B),setint(A),setint(B) |- (union(A,B) --> C), (Belief:Union)
    (A --> C), (B --> C), neq(A,B),setint(A),setint(B) |- (intersect(A,B) --> C), (Belief:Intersection)
    (A --> C), (B --> C), neq(A,B),setint(A),setint(B) |- (differ(A,B) --> C), (Belief:Difference)

//Set Decomposition

    (C --> X), X, set(X) |- (C --> dropAnySet(X)), (Belief:StructuralDeduction, Goal:StructuralDeduction)
    (X --> C), X, set(X) |- (dropAnySet(X) --> C), (Belief:StructuralDeduction, Goal:StructuralDeduction)

//Set Un-recurser
    ({ (V-->K), A..* }-->M), M |- ({V} --> (M,K)), (Belief:StructuralDeduction, Goal:StructuralDeduction)

//Set Questions

    ([A] <-> [B]), (A <-> B), task("?") |- ([A] <-> [B]), (Belief:BeliefIdentity, Punctuation:Belief)
    ({A} <-> {B}), (A <-> B), task("?") |- ({A} <-> {B}), (Belief:BeliefIdentity, Punctuation:Belief)

    ([A] --> [B]), (A <-> B), task("?") |- ([A] --> [B]), (Belief:BeliefIdentity, Punctuation:Belief)
    ({A} --> {B}), (A <-> B), task("?") |- ({A} --> {B}), (Belief:BeliefIdentity, Punctuation:Belief)


