package ideal.vacuum.eca.ss.enaction;

import ideal.vacuum.eca.ActInstance;
import ideal.vacuum.eca.construct.Action;
import ideal.vacuum.eca.construct.Appearance;
import ideal.vacuum.eca.construct.Displacement;
import ideal.vacuum.eca.construct.egomem.PhenomenonInstance;
import ideal.vacuum.eca.construct.experiment.Experiment;
import ideal.vacuum.ernest.Effect;
import ideal.vacuum.tracing.ITracer;
import spacegraph.phys.math.Transform;

import java.util.ArrayList;
import java.util.List;

/**
 * A structure used to manage the enaction of a scheme in the real world
 * or the simulation of the enaction of a scheme in spatial memory.
 * @author ogeorgeon
 */
public interface Enaction 
{
	/**
	 * Track the current enaction based on Ernest's input.
	 * @param input Ernest's input.
	 */
    void track(Effect input);
	
	/**
	 * Track the current enaction based on the list of places received from the environment
	 * @param actInstances The list of places received from the environment
	 * @param transform The transformation sensed in the environment.
	 */
    void track(List<ActInstance> actInstances, Transform transform, PhenomenonInstance focusPhenomenonInstance);
	
	/**
	 * @param displacement The displacement sensed during this primitive enaction.
	 */
	//public void setDisplacement(Displacement displacement);
	
	/**
	 * @return The displacement sensed during this primitive enaction.
	 */
	//public Displacement getDisplacement();
	
	/**
	 * @param act The last primitive intended interaction
	 */
    void setIntendedPrimitiveAct(Act act);
	
	/**
	 * @return The last primitive intended interaction
	 */
    Act getIntendedPrimitiveAct();

	/**
	 * @param act The last primitive enacted interaction
	 */
    void setEnactedPrimitiveAct(Act act);
	
	/**
	 * @return The last primitive enacted interaction
	 */
    Act getEnactedPrimitiveAct();

	/**
	 * @param act The composite interaction to be enacted
	 */
    void setTopIntendedAct(Act act);
	
	/**
	 * @return The composite interaction to be enacted
	 */
    Act getTopAct();

	/**
	 * @param act The highest-level composite interaction enacted thus far.
	 */
    void setTopEnactedAct(Act act);
	
	/**
	 * @return The highest-level composite interaction enacted thus far.
	 */
    Act getTopEnactedAct();

	/**
	 * @param act The remaining highest-level composite interaction to enact.
	 */
    void setTopRemainingAct(Act act);
	
	/**
	 * @return The remaining highest-level composite interaction to enact.
	 */
    Act getTopRemainingAct();

	/**
	 * @param step The rank of the primitive act in the current enaction 
	 */
    void setStep(int step);

	/**
	 * @return The rank of the primitive act in the current enaction 
	 */
    int getStep();
	
	/**
	 * @param successful false if the top intention was not correctly enacted
	 */
    void setSuccessful(boolean successful);
	
	/**
	 * @return True if this enaction is terminated.
	 */
    boolean isOver();
	
	/**
	 * @param enactedAct The enacted act.
	 * @param performedAct The performed act.
	 * @param contextList The context List.
	 */
    void setFinalContext(Act enactedAct, Act performedAct, ArrayList<Act> contextList);
	
	/**
	 * @return
	 */
    ArrayList<Act> getFinalLearningContext();
	
	/**
	 * @return
	 */
    ArrayList<Act> getFinalActivationContext();
	
	/**
	 * @param learningContext
	 */
    void setInitialLearningContext(ArrayList<Act> learningContext);
	
	/**
	 * @return
	 */
    ArrayList<Act>  getInitialLearningContext();
	
	/**
	 * @param learningContext
	 */
    void setPreviousLearningContext(ArrayList<Act> learningContext);
	
	/**
	 * @return
	 */
    ArrayList<Act>  getPreviousLearningContext();
	
	/**
	 * @param nbActLearned
	 */
    void setNbActLearned(int nbActLearned);
	

	/**
	 * Trace the tracking of the enaction (just after a primitive interaction being enacted)
	 * @param tracer The tracer
	 */
    void traceTrack(ITracer tracer);
	
	/**
	 * Trace the carrying out of an enaction (just before the next intended primitive interaction)
	 * @param tracer The tracer
	 */
    void traceCarry(ITracer tracer);

	/**
	 * Trace the termination of an enaction
	 * @param tracer The tracer
	 */
    void traceTerminate(ITracer tracer);
	
	/**
	 * @return The list of places enacted during the last interaction cycle.
	 */
    List<ActInstance> getEnactedPlaces();
	
	/**
	 * @return The salient place used by the sequential system
	 */
    ActInstance getSalientActInstance();
	
	/**
	 * @return The transformation generated by this primitive enaction
	 */
    Transform getTransform();

	void setIntendedAction(Action action);
	Action getIntendedAction();
	
	//public void setInitialArea(Area area);
	//public Area getInitialArea();
	
	void setAppearances(List<Appearance> appearances);
	List<Appearance> getAppearances();
	
	void setExperiment(Experiment experiment);
	Experiment getExperiment();

	Displacement getDisplacement();
}
